
UART_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a94  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800208c  0800208c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800208c  0800208c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800208c  0800208c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800208c  0800208c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002090  08002090  00012090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08002094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000f4  08002188  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002188  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000486c  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f47  00000000  00000000  00024989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  000258d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00025b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001e49  00000000  00000000  00025de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000014e6  00000000  00000000  00027c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0002910f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000d0c  00000000  00000000  00029164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000f4 	.word	0x200000f4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001bac 	.word	0x08001bac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000f8 	.word	0x200000f8
 800016c:	08001bac 	.word	0x08001bac

08000170 <MCRC_voidReset>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void MCRC_voidReset ()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	 CRC_CR = CRC_RESRT;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <MCRC_voidReset+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	40023008 	.word	0x40023008

08000188 <MCRC_u32CalculateCrcHw>:

u32 MCRC_u32CalculateCrcHw(u32 * Copy_u32WordArray, u8 Copy_u8ByteArraySize )
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	460b      	mov	r3, r1
 8000192:	70fb      	strb	r3, [r7, #3]
	 u32  Loc_u32PtrCrc = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	60fb      	str	r3, [r7, #12]
   if(Copy_u32WordArray != NULL)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d014      	beq.n	80001c8 <MCRC_u32CalculateCrcHw+0x40>
   {
#ifndef CRC_ACUMEALTE_CALA
MCRC_voidReset();
#endif
      for(u32 Local_u32WordCounter = 0;Local_u32WordCounter < Copy_u8ByteArraySize;++Local_u32WordCounter)
 800019e:	2300      	movs	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
 80001a2:	e00a      	b.n	80001ba <MCRC_u32CalculateCrcHw+0x32>
      {
         CRC_DR = (u8)(Copy_u32WordArray[Local_u32WordCounter]);
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4413      	add	r3, r2
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <MCRC_u32CalculateCrcHw+0x4c>)
 80001b2:	601a      	str	r2, [r3, #0]
      for(u32 Local_u32WordCounter = 0;Local_u32WordCounter < Copy_u8ByteArraySize;++Local_u32WordCounter)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	3301      	adds	r3, #1
 80001b8:	60bb      	str	r3, [r7, #8]
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	68ba      	ldr	r2, [r7, #8]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d3f0      	bcc.n	80001a4 <MCRC_u32CalculateCrcHw+0x1c>
      }

      Loc_u32PtrCrc = CRC_DR;
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <MCRC_u32CalculateCrcHw+0x4c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	60fb      	str	r3, [r7, #12]
   }
   else
   {
      /*!<TODO: Null pointer detected */
   }
   return Loc_u32PtrCrc;
 80001c8:	68fb      	ldr	r3, [r7, #12]
}
 80001ca:	4618      	mov	r0, r3
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40023000 	.word	0x40023000

080001d8 <DMA_voidClearFlag>:
	CLR_BIT(DMA1->channel[Copy_u8ChannelNum].CCR ,Copy_u8DMAIntType );

}

void DMA_voidClearFlag( Channel_T Copy_u8DMA_Channel , Flag_T Copy_u8Flag )
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	SET_BIT(DMA1-> IFCR , ((Copy_u8DMA_Channel*4)+ Copy_u8Flag));
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <DMA_voidClearFlag+0x34>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	0091      	lsls	r1, r2, #2
 80001f0:	79ba      	ldrb	r2, [r7, #6]
 80001f2:	440a      	add	r2, r1
 80001f4:	2101      	movs	r1, #1
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	4611      	mov	r1, r2
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <DMA_voidClearFlag+0x34>)
 80001fe:	430b      	orrs	r3, r1
 8000200:	6053      	str	r3, [r2, #4]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40020000 	.word	0x40020000

08000210 <DMA1_Channel1_IRQHandler>:
}



void DMA1_Channel1_IRQHandler()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	DMA_voidClearFlag(CH_1, GIF);
 8000214:	2100      	movs	r1, #0
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffde 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_1, HTIF);
 800021c:	2102      	movs	r1, #2
 800021e:	2000      	movs	r0, #0
 8000220:	f7ff ffda 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_1, TCIF);
 8000224:	2101      	movs	r1, #1
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffd6 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_1, TEIF);
 800022c:	2103      	movs	r1, #3
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd2 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_1]();
 8000234:	4b02      	ldr	r3, [pc, #8]	; (8000240 <DMA1_Channel1_IRQHandler+0x30>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4798      	blx	r3
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000110 	.word	0x20000110

08000244 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	DMA_voidClearFlag(CH_2, GIF);
 8000248:	2100      	movs	r1, #0
 800024a:	2001      	movs	r0, #1
 800024c:	f7ff ffc4 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_2, HTIF);
 8000250:	2102      	movs	r1, #2
 8000252:	2001      	movs	r0, #1
 8000254:	f7ff ffc0 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_2, TCIF);
 8000258:	2101      	movs	r1, #1
 800025a:	2001      	movs	r0, #1
 800025c:	f7ff ffbc 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_2, TEIF);
 8000260:	2103      	movs	r1, #3
 8000262:	2001      	movs	r0, #1
 8000264:	f7ff ffb8 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_2]();
 8000268:	4b02      	ldr	r3, [pc, #8]	; (8000274 <DMA1_Channel2_IRQHandler+0x30>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4798      	blx	r3
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000110 	.word	0x20000110

08000278 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	DMA_voidClearFlag(CH_3, GIF);
 800027c:	2100      	movs	r1, #0
 800027e:	2002      	movs	r0, #2
 8000280:	f7ff ffaa 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_3, HTIF);
 8000284:	2102      	movs	r1, #2
 8000286:	2002      	movs	r0, #2
 8000288:	f7ff ffa6 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_3, TCIF);
 800028c:	2101      	movs	r1, #1
 800028e:	2002      	movs	r0, #2
 8000290:	f7ff ffa2 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag(CH_3, TEIF);
 8000294:	2103      	movs	r1, #3
 8000296:	2002      	movs	r0, #2
 8000298:	f7ff ff9e 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_3]();
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <DMA1_Channel3_IRQHandler+0x30>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4798      	blx	r3
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000110 	.word	0x20000110

080002ac <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	DMA_voidClearFlag( CH_4, GIF);
 80002b0:	2100      	movs	r1, #0
 80002b2:	2003      	movs	r0, #3
 80002b4:	f7ff ff90 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_4, HTIF);
 80002b8:	2102      	movs	r1, #2
 80002ba:	2003      	movs	r0, #3
 80002bc:	f7ff ff8c 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_4, TCIF);
 80002c0:	2101      	movs	r1, #1
 80002c2:	2003      	movs	r0, #3
 80002c4:	f7ff ff88 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_4, TEIF);
 80002c8:	2103      	movs	r1, #3
 80002ca:	2003      	movs	r0, #3
 80002cc:	f7ff ff84 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_4]();
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <DMA1_Channel4_IRQHandler+0x30>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000110 	.word	0x20000110

080002e0 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	DMA_voidClearFlag( CH_5, GIF);
 80002e4:	2100      	movs	r1, #0
 80002e6:	2004      	movs	r0, #4
 80002e8:	f7ff ff76 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_5, HTIF);
 80002ec:	2102      	movs	r1, #2
 80002ee:	2004      	movs	r0, #4
 80002f0:	f7ff ff72 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_5, TCIF);
 80002f4:	2101      	movs	r1, #1
 80002f6:	2004      	movs	r0, #4
 80002f8:	f7ff ff6e 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_5, TEIF);
 80002fc:	2103      	movs	r1, #3
 80002fe:	2004      	movs	r0, #4
 8000300:	f7ff ff6a 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_5]();
 8000304:	4b02      	ldr	r3, [pc, #8]	; (8000310 <DMA1_Channel5_IRQHandler+0x30>)
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000110 	.word	0x20000110

08000314 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	DMA_voidClearFlag( CH_6, GIF);
 8000318:	2100      	movs	r1, #0
 800031a:	2005      	movs	r0, #5
 800031c:	f7ff ff5c 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_6, HTIF);
 8000320:	2102      	movs	r1, #2
 8000322:	2005      	movs	r0, #5
 8000324:	f7ff ff58 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_6, TCIF);
 8000328:	2101      	movs	r1, #1
 800032a:	2005      	movs	r0, #5
 800032c:	f7ff ff54 	bl	80001d8 <DMA_voidClearFlag>
	DMA_voidClearFlag( CH_6, TEIF);
 8000330:	2103      	movs	r1, #3
 8000332:	2005      	movs	r0, #5
 8000334:	f7ff ff50 	bl	80001d8 <DMA_voidClearFlag>
	DMA_CH_CallBack[CH_6]();
 8000338:	4b02      	ldr	r3, [pc, #8]	; (8000344 <DMA1_Channel6_IRQHandler+0x30>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4798      	blx	r3
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000110 	.word	0x20000110

08000348 <MGPIO_voidSetPinDirection>:
#include "../Inc/MCAL/GPIO/GPIO_configuration.h"



void MGPIO_voidSetPinDirection(GPIO_PORT_t PortID, GPIO_PIN_t PinID, GPIO_DIRECTION_t Direction)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
 8000352:	460b      	mov	r3, r1
 8000354:	71bb      	strb	r3, [r7, #6]
 8000356:	4613      	mov	r3, r2
 8000358:	717b      	strb	r3, [r7, #5]
			/*range check*/
		if (PortID <= GPIO_U8_PORTC && PinID <= GPIO_U8_PIN15)
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b02      	cmp	r3, #2
 800035e:	f200 80c6 	bhi.w	80004ee <MGPIO_voidSetPinDirection+0x1a6>
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2b0f      	cmp	r3, #15
 8000366:	f200 80c2 	bhi.w	80004ee <MGPIO_voidSetPinDirection+0x1a6>
		{
		switch (PortID)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2b02      	cmp	r3, #2
 800036e:	f000 8082 	beq.w	8000476 <MGPIO_voidSetPinDirection+0x12e>
 8000372:	2b02      	cmp	r3, #2
 8000374:	f300 80c2 	bgt.w	80004fc <MGPIO_voidSetPinDirection+0x1b4>
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <MGPIO_voidSetPinDirection+0x3a>
 800037c:	2b01      	cmp	r3, #1
 800037e:	d03e      	beq.n	80003fe <MGPIO_voidSetPinDirection+0xb6>
			break;
		}

		}/*switch*/
	}/*if check range*/
}
 8000380:	e0bc      	b.n	80004fc <MGPIO_voidSetPinDirection+0x1b4>
			if (PinID < 8)  /*CRL*/
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	2b07      	cmp	r3, #7
 8000386:	d817      	bhi.n	80003b8 <MGPIO_voidSetPinDirection+0x70>
				PORTA->GPIOA_CRL &= ~((0b1111)   << (PinID * 4));
 8000388:	4b5f      	ldr	r3, [pc, #380]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	79ba      	ldrb	r2, [r7, #6]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	210f      	movs	r1, #15
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	43d2      	mvns	r2, r2
 8000398:	4611      	mov	r1, r2
 800039a:	4a5b      	ldr	r2, [pc, #364]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 800039c:	400b      	ands	r3, r1
 800039e:	6013      	str	r3, [r2, #0]
				PORTA->GPIOA_CRL |=  ((Direction)<< (PinID * 4));
 80003a0:	4b59      	ldr	r3, [pc, #356]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	7979      	ldrb	r1, [r7, #5]
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	fa01 f202 	lsl.w	r2, r1, r2
 80003ae:	4611      	mov	r1, r2
 80003b0:	4a55      	ldr	r2, [pc, #340]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003b2:	430b      	orrs	r3, r1
 80003b4:	6013      	str	r3, [r2, #0]
			break;
 80003b6:	e09c      	b.n	80004f2 <MGPIO_voidSetPinDirection+0x1aa>
			else if (PinID <16 && PinID >7)/*CRH*/
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	2b0f      	cmp	r3, #15
 80003bc:	f200 8099 	bhi.w	80004f2 <MGPIO_voidSetPinDirection+0x1aa>
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b07      	cmp	r3, #7
 80003c4:	f240 8095 	bls.w	80004f2 <MGPIO_voidSetPinDirection+0x1aa>
				PinID -= 8;
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	3b08      	subs	r3, #8
 80003cc:	71bb      	strb	r3, [r7, #6]
				PORTA->GPIOA_CRH &= ~((0b1111)   << (PinID * 4));
 80003ce:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	79ba      	ldrb	r2, [r7, #6]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	210f      	movs	r1, #15
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a49      	ldr	r2, [pc, #292]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	6053      	str	r3, [r2, #4]
				PORTA->GPIOA_CRH |=  ((Direction)<< (PinID * 4));
 80003e6:	4b48      	ldr	r3, [pc, #288]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	7979      	ldrb	r1, [r7, #5]
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	0092      	lsls	r2, r2, #2
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	4611      	mov	r1, r2
 80003f6:	4a44      	ldr	r2, [pc, #272]	; (8000508 <MGPIO_voidSetPinDirection+0x1c0>)
 80003f8:	430b      	orrs	r3, r1
 80003fa:	6053      	str	r3, [r2, #4]
			break;
 80003fc:	e079      	b.n	80004f2 <MGPIO_voidSetPinDirection+0x1aa>
			if (PinID < 8)  /*CRL*/
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	2b07      	cmp	r3, #7
 8000402:	d817      	bhi.n	8000434 <MGPIO_voidSetPinDirection+0xec>
				PORTB->GPIOB_CRL &= ~((0b1111)   << (PinID * 4));
 8000404:	4b41      	ldr	r3, [pc, #260]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	210f      	movs	r1, #15
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a3d      	ldr	r2, [pc, #244]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 8000418:	400b      	ands	r3, r1
 800041a:	6013      	str	r3, [r2, #0]
				PORTB->GPIOB_CRL |=  ((Direction)<< (PinID * 4));
 800041c:	4b3b      	ldr	r3, [pc, #236]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a37      	ldr	r2, [pc, #220]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
			break;
 8000432:	e060      	b.n	80004f6 <MGPIO_voidSetPinDirection+0x1ae>
			else if (PinID <16 && PinID >7)/*CRH*/
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d85d      	bhi.n	80004f6 <MGPIO_voidSetPinDirection+0x1ae>
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	2b07      	cmp	r3, #7
 800043e:	d95a      	bls.n	80004f6 <MGPIO_voidSetPinDirection+0x1ae>
				PinID -= 8;
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	3b08      	subs	r3, #8
 8000444:	71bb      	strb	r3, [r7, #6]
				PORTB->GPIOB_CRH &= ~((0b1111)   << (PinID * 4));
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	79ba      	ldrb	r2, [r7, #6]
 800044c:	0092      	lsls	r2, r2, #2
 800044e:	210f      	movs	r1, #15
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	43d2      	mvns	r2, r2
 8000456:	4611      	mov	r1, r2
 8000458:	4a2c      	ldr	r2, [pc, #176]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 800045a:	400b      	ands	r3, r1
 800045c:	6053      	str	r3, [r2, #4]
				PORTB->GPIOB_CRH |=  ((Direction)<< (PinID * 4));
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	7979      	ldrb	r1, [r7, #5]
 8000464:	79ba      	ldrb	r2, [r7, #6]
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	fa01 f202 	lsl.w	r2, r1, r2
 800046c:	4611      	mov	r1, r2
 800046e:	4a27      	ldr	r2, [pc, #156]	; (800050c <MGPIO_voidSetPinDirection+0x1c4>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6053      	str	r3, [r2, #4]
			break;
 8000474:	e03f      	b.n	80004f6 <MGPIO_voidSetPinDirection+0x1ae>
			if (PinID < 8)  /*CRL*/
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2b07      	cmp	r3, #7
 800047a:	d817      	bhi.n	80004ac <MGPIO_voidSetPinDirection+0x164>
			PORTC->GPIOC_CRL &= ~((0b1111)   << (PinID * 4));
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	79ba      	ldrb	r2, [r7, #6]
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	210f      	movs	r1, #15
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	43d2      	mvns	r2, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a20      	ldr	r2, [pc, #128]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 8000490:	400b      	ands	r3, r1
 8000492:	6013      	str	r3, [r2, #0]
			PORTC->GPIOC_CRL |=  ((Direction)<< (PinID * 4));
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	7979      	ldrb	r1, [r7, #5]
 800049a:	79ba      	ldrb	r2, [r7, #6]
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6013      	str	r3, [r2, #0]
			break;
 80004aa:	e026      	b.n	80004fa <MGPIO_voidSetPinDirection+0x1b2>
			else if (PinID <16 && PinID >7)/*CRH*/
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	2b0f      	cmp	r3, #15
 80004b0:	d823      	bhi.n	80004fa <MGPIO_voidSetPinDirection+0x1b2>
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d920      	bls.n	80004fa <MGPIO_voidSetPinDirection+0x1b2>
				PinID -= 8;
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	3b08      	subs	r3, #8
 80004bc:	71bb      	strb	r3, [r7, #6]
				PORTC->GPIOC_CRH &= ~((0b1111)   << (PinID * 4));
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	79ba      	ldrb	r2, [r7, #6]
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	210f      	movs	r1, #15
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	43d2      	mvns	r2, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 80004d2:	400b      	ands	r3, r1
 80004d4:	6053      	str	r3, [r2, #4]
				PORTC->GPIOC_CRH |=  ((Direction)<< (PinID * 4));
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	7979      	ldrb	r1, [r7, #5]
 80004dc:	79ba      	ldrb	r2, [r7, #6]
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <MGPIO_voidSetPinDirection+0x1c8>)
 80004e8:	430b      	orrs	r3, r1
 80004ea:	6053      	str	r3, [r2, #4]
			break;
 80004ec:	e005      	b.n	80004fa <MGPIO_voidSetPinDirection+0x1b2>
	}/*if check range*/
 80004ee:	bf00      	nop
 80004f0:	e004      	b.n	80004fc <MGPIO_voidSetPinDirection+0x1b4>
			break;
 80004f2:	bf00      	nop
 80004f4:	e002      	b.n	80004fc <MGPIO_voidSetPinDirection+0x1b4>
			break;
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <MGPIO_voidSetPinDirection+0x1b4>
			break;
 80004fa:	bf00      	nop
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00
 8000510:	40011000 	.word	0x40011000

08000514 <MRCC_voidInit>:
#include "../Inc/MCAL/RCC/RCC_interface.h"
#include "../Inc/MCAL/RCC/RCC_private.h"
#include "../Inc/MCAL/RCC/RCC_configuration.h"

void MRCC_voidInit (void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
#if CLK_SOURCE == HSI
	/*step (1): Turn on HSI*/
	MRCC_voidClkEnable(HSI);
 8000518:	2000      	movs	r0, #0
 800051a:	f000 f817 	bl	800054c <MRCC_voidClkEnable>

	/*step (2): check HSI is ready*/
	while (MRCC_u8CheckClockReady(HSI) == NOT_READY);
 800051e:	bf00      	nop
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f86b 	bl	80005fc <MRCC_u8CheckClockReady>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f9      	beq.n	8000520 <MRCC_voidInit+0xc>

	/*step (3): set buses prescaller*/
	MRCC_voidSetBusesPrescaler(AHB_PRESCALER, ABP1_PRESCALER, ABP2_PRESCALER);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f895 	bl	8000660 <MRCC_voidSetBusesPrescaler>

	/*step (4): switch to HSI clock*/
	MRCC_voidSetClkSource(HSI);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f8c2 	bl	80006c0 <MRCC_voidSetClkSource>

	/*step (5): turn off HSE and PLL*/
	MRCC_voidClkDisable(HSE);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 f831 	bl	80005a4 <MRCC_voidClkDisable>
	MRCC_voidClkDisable(PLL);
 8000542:	2002      	movs	r0, #2
 8000544:	f000 f82e 	bl	80005a4 <MRCC_voidClkDisable>
#endif

#else
#error Wrong PLL Configurations
#endif /*CLK_SOURCE*/
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <MRCC_voidClkEnable>:
void MRCC_voidClkEnable (u8 A_u8ClkSource)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d014      	beq.n	8000586 <MRCC_voidClkEnable+0x3a>
 800055c:	2b02      	cmp	r3, #2
 800055e:	dc19      	bgt.n	8000594 <MRCC_voidClkEnable+0x48>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <MRCC_voidClkEnable+0x1e>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d007      	beq.n	8000578 <MRCC_voidClkEnable+0x2c>
	{
	case HSI: SET_BIT(RCC->CR, HSI_ON_BIT); break;
	case HSE: SET_BIT(RCC->CR, HSE_ON_BIT); break;
	case PLL: SET_BIT(RCC->CR, PLL_ON_BIT); break;
	}
}
 8000568:	e014      	b.n	8000594 <MRCC_voidClkEnable+0x48>
	case HSI: SET_BIT(RCC->CR, HSI_ON_BIT); break;
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e00d      	b.n	8000594 <MRCC_voidClkEnable+0x48>
	case HSE: SET_BIT(RCC->CR, HSE_ON_BIT); break;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 800057e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	e006      	b.n	8000594 <MRCC_voidClkEnable+0x48>
	case PLL: SET_BIT(RCC->CR, PLL_ON_BIT); break;
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <MRCC_voidClkEnable+0x54>)
 800058c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	bf00      	nop
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <MRCC_voidClkDisable>:

void MRCC_voidClkDisable (u8 A_u8ClkSource)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
		switch (A_u8ClkSource)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d014      	beq.n	80005de <MRCC_voidClkDisable+0x3a>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	dc19      	bgt.n	80005ec <MRCC_voidClkDisable+0x48>
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <MRCC_voidClkDisable+0x1e>
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d007      	beq.n	80005d0 <MRCC_voidClkDisable+0x2c>
		{
		case HSI: CLR_BIT(RCC->CR, HSI_ON_BIT); break;
		case HSE: CLR_BIT(RCC->CR, HSE_ON_BIT); break;
		case PLL: CLR_BIT(RCC->CR, PLL_ON_BIT); break;
		}
}
 80005c0:	e014      	b.n	80005ec <MRCC_voidClkDisable+0x48>
		case HSI: CLR_BIT(RCC->CR, HSI_ON_BIT); break;
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]
 80005ce:	e00d      	b.n	80005ec <MRCC_voidClkDisable+0x48>
		case HSE: CLR_BIT(RCC->CR, HSE_ON_BIT); break;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	e006      	b.n	80005ec <MRCC_voidClkDisable+0x48>
		case PLL: CLR_BIT(RCC->CR, PLL_ON_BIT); break;
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <MRCC_voidClkDisable+0x54>)
 80005e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	bf00      	nop
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <MRCC_u8CheckClockReady>:

u8 MRCC_u8CheckClockReady (u8 A_u8ClkSource)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	u8 local_u8ReadyFlag = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
	switch (A_u8ClkSource)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d016      	beq.n	800063e <MRCC_u8CheckClockReady+0x42>
 8000610:	2b02      	cmp	r3, #2
 8000612:	dc1c      	bgt.n	800064e <MRCC_u8CheckClockReady+0x52>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <MRCC_u8CheckClockReady+0x22>
 8000618:	2b01      	cmp	r3, #1
 800061a:	d008      	beq.n	800062e <MRCC_u8CheckClockReady+0x32>
 800061c:	e017      	b.n	800064e <MRCC_u8CheckClockReady+0x52>
		{
		case HSI: local_u8ReadyFlag = GET_BIT(RCC->CR, HSI_RDY_BIT); break;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MRCC_u8CheckClockReady+0x60>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	085b      	lsrs	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e00f      	b.n	800064e <MRCC_u8CheckClockReady+0x52>
		case HSE: local_u8ReadyFlag = GET_BIT(RCC->CR, HSE_RDY_BIT); break;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MRCC_u8CheckClockReady+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0c5b      	lsrs	r3, r3, #17
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e007      	b.n	800064e <MRCC_u8CheckClockReady+0x52>
		case PLL: local_u8ReadyFlag = GET_BIT(RCC->CR, PLL_RDY_BIT); break;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <MRCC_u8CheckClockReady+0x60>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0e5b      	lsrs	r3, r3, #25
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	bf00      	nop
		}
	return local_u8ReadyFlag;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <MRCC_voidSetBusesPrescaler>:

void MRCC_voidSetBusesPrescaler (u8 A_u8AHBPrescaler, u8 A_u8APB1Prescaler, u8 A_u8APB2Prescaler)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	460b      	mov	r3, r1
 800066c:	71bb      	strb	r3, [r7, #6]
 800066e:	4613      	mov	r3, r2
 8000670:	717b      	strb	r3, [r7, #5]
	/* BUSES_PRESCALER_RESET_MASK: is a mask to clear only bits used in prescaller set for AHB - APB1 - APB2 */
	RCC->CFGR &= ~(BUSES_PRESCALER_RESET_MASK);
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 8000678:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800067c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000680:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  (A_u8AHBPrescaler  << AHB_PRESCALER_FBIT);
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	4611      	mov	r1, r2
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  (A_u8APB1Prescaler << APB1_PRESCALER_FBIT);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	79ba      	ldrb	r2, [r7, #6]
 8000698:	0212      	lsls	r2, r2, #8
 800069a:	4611      	mov	r1, r2
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=  (A_u8APB2Prescaler << APB2_PRESCALER_FBIT);
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	797a      	ldrb	r2, [r7, #5]
 80006a8:	02d2      	lsls	r2, r2, #11
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a03      	ldr	r2, [pc, #12]	; (80006bc <MRCC_voidSetBusesPrescaler+0x5c>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	6053      	str	r3, [r2, #4]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <MRCC_voidSetClkSource>:


void MRCC_voidSetClkSource(u8 A_u8ClkSource)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	switch (A_u8ClkSource)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d020      	beq.n	8000712 <MRCC_voidSetClkSource+0x52>
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	dc2b      	bgt.n	800072c <MRCC_voidSetClkSource+0x6c>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d002      	beq.n	80006de <MRCC_voidSetClkSource+0x1e>
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d00d      	beq.n	80006f8 <MRCC_voidSetClkSource+0x38>
	  	  	  CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);break;

	case PLL: CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
	  	  	  SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);break;
	}
}
 80006dc:	e026      	b.n	800072c <MRCC_voidSetClkSource+0x6c>
	case HSI: CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
			  CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);break;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006f0:	f023 0302 	bic.w	r3, r3, #2
 80006f4:	6053      	str	r3, [r2, #4]
 80006f6:	e019      	b.n	800072c <MRCC_voidSetClkSource+0x6c>
	case HSE: SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6053      	str	r3, [r2, #4]
	  	  	  CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);break;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 800070a:	f023 0302 	bic.w	r3, r3, #2
 800070e:	6053      	str	r3, [r2, #4]
 8000710:	e00c      	b.n	800072c <MRCC_voidSetClkSource+0x6c>
	case PLL: CLR_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT0);
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	6053      	str	r3, [r2, #4]
	  	  	  SET_BIT(RCC->CFGR, SYSTEM_CLOCK_BIT1);break;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <MRCC_voidSetClkSource+0x78>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6053      	str	r3, [r2, #4]
 800072a:	bf00      	nop
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <MRCC_voidPreipheralEnable>:
		RCC->CFGR |= (A_u8MulFactor << PLL_MUL_FBIT);
}


void MRCC_voidPreipheralEnable (u8 A_u8BusID, u8 A_u8PrephieralID)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	460a      	mov	r2, r1
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	if (A_u8PrephieralID < 31)
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	2b1e      	cmp	r3, #30
 8000750:	d82a      	bhi.n	80007a8 <MRCC_voidPreipheralEnable+0x6c>
	{
			switch (A_u8BusID)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d01c      	beq.n	8000792 <MRCC_voidPreipheralEnable+0x56>
 8000758:	2b02      	cmp	r3, #2
 800075a:	dc26      	bgt.n	80007aa <MRCC_voidPreipheralEnable+0x6e>
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <MRCC_voidPreipheralEnable+0x2a>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d00b      	beq.n	800077c <MRCC_voidPreipheralEnable+0x40>
			case AHB  : SET_BIT( RCC->AHBENR,  A_u8PrephieralID); break;
			case APB1 : SET_BIT( RCC->APB1ENR, A_u8PrephieralID); break;
			case APB2 : SET_BIT( RCC->APB2ENR, A_u8PrephieralID); break;
			}
	}
}
 8000764:	e021      	b.n	80007aa <MRCC_voidPreipheralEnable+0x6e>
			case AHB  : SET_BIT( RCC->AHBENR,  A_u8PrephieralID); break;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	79ba      	ldrb	r2, [r7, #6]
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	e016      	b.n	80007aa <MRCC_voidPreipheralEnable+0x6e>
			case APB1 : SET_BIT( RCC->APB1ENR, A_u8PrephieralID); break;
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 800078c:	430b      	orrs	r3, r1
 800078e:	61d3      	str	r3, [r2, #28]
 8000790:	e00b      	b.n	80007aa <MRCC_voidPreipheralEnable+0x6e>
			case APB2 : SET_BIT( RCC->APB2ENR, A_u8PrephieralID); break;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	2101      	movs	r1, #1
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <MRCC_voidPreipheralEnable+0x78>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	e000      	b.n	80007aa <MRCC_voidPreipheralEnable+0x6e>
	}
 80007a8:	bf00      	nop
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <MUART_voidInit>:
#define WAIT_TO_TRANSMIT   (GET_BIT(UARTChannel[Copy_u8UartNumber]->SR, TC)   == 0)
#define WAIT_TO_RECEIVE    (GET_BIT(UARTChannel[Copy_u8UartNumber]->SR, RXNE) == 0)


void 	MUART_voidInit 		(UART_Num_t UART_NUM)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	/*clear CR1 - CR2 - CR3 - SR */
	UARTChannel[UART_NUM] -> CR [0] = CLR_REGISTER;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4a29      	ldr	r2, [pc, #164]	; (800086c <MUART_voidInit+0xb4>)
 80007c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
	UARTChannel[UART_NUM] -> CR [1] = CLR_REGISTER;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a26      	ldr	r2, [pc, #152]	; (800086c <MUART_voidInit+0xb4>)
 80007d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
	UARTChannel[UART_NUM] -> CR [2] = CLR_REGISTER;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a23      	ldr	r2, [pc, #140]	; (800086c <MUART_voidInit+0xb4>)
 80007de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
	UARTChannel[UART_NUM] -> SR     = CLR_REGISTER;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <MUART_voidInit+0xb4>)
 80007ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]

	UARTChannel[UART_NUM] -> CR[0]     |=    ( (SEND_BREAK      << SPK)  | (RECEIVER_WAKEUP     <<RWU)| (PARITY_SELECTION << PS)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <MUART_voidInit+0xb4>)
 80007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	491b      	ldr	r1, [pc, #108]	; (800086c <MUART_voidInit+0xb4>)
 8000800:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000808:	f043 030c 	orr.w	r3, r3, #12
 800080c:	60d3      	str	r3, [r2, #12]
										     | (RECEIVER_ENABLE << RE)   | (TRANSMITTER_ENABLE  <<TE) | (PARITY_CONTROL << PCE)
										     | (WAKEUP_METHOD   << WAKE) | (WORD_LENGTH         <<M));

	UARTChannel[UART_NUM] -> CR[1]     |=    ( (NODE_ADDRESS 		 << ADD)  | (LIN_BREAK_DETEC_LENGTH << LBDL)| (LIN_BREAK_DETEC_INTERRUPT << LBDIE)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4a16      	ldr	r2, [pc, #88]	; (800086c <MUART_voidInit+0xb4>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	; (800086c <MUART_voidInit+0xb4>)
 800081c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000824:	611a      	str	r2, [r3, #16]
										     | (LAST_BIT_CLOCK_PULSE << LBCL) | (CLOCK_PHASE     		<< CPHA)| (CLOCK_POLARITY 			 << CPOL)
										     | (CLOCK_PIN_ENABLE 	 << CLKEN)| (STOP_BIT_NUMBER        << STOP)| (LIN_MODE 				 << LINEN));

	UARTChannel[UART_NUM] -> CR[2]     |=    ( (IRDA_MODE 	    << IREN) | (IRDA_LOW_POWER << IRLP)  | (HALF_DUPLEX  << HDSEL)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a10      	ldr	r2, [pc, #64]	; (800086c <MUART_voidInit+0xb4>)
 800082a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	490e      	ldr	r1, [pc, #56]	; (800086c <MUART_voidInit+0xb4>)
 8000832:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000836:	6952      	ldr	r2, [r2, #20]
 8000838:	615a      	str	r2, [r3, #20]
										     | (SMARTCARD_NACK  << NACK) | (SMARTCARD_MODE << SCEN)  | (DMA_RECEIVER <<  DMAR)
										     | (DMA_TRANSMITTER << DMAT) | (RTS_MODE       << RTSE)  | (CTS_MODE     <<  CTSE));

	/*set boudrate*/
	UARTChannel[UART_NUM] -> BRR  = UART_BAUDRATE;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <MUART_voidInit+0xb4>)
 800083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000842:	f240 3241 	movw	r2, #833	; 0x341
 8000846:	609a      	str	r2, [r3, #8]
	/*enable UART*/
	UARTChannel[UART_NUM] -> CR[0] |= (ENABLE_UART << UE);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <MUART_voidInit+0xb4>)
 800084c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4905      	ldr	r1, [pc, #20]	; (800086c <MUART_voidInit+0xb4>)
 8000856:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800085a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800085e:	60da      	str	r2, [r3, #12]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	08002044 	.word	0x08002044

08000870 <MUART_voidTransmitSynch>:
#endif
	}

}
ReturnStatus MUART_voidTransmitSynch (u8 Copy_u8UartNumber, u8 Copy_u8DataArray[], u8 sizeOfTransmittedData)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
	if ( (Copy_u8DataArray == NULL) || (sizeOfTransmittedData == 0))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <MUART_voidTransmitSynch+0x1c>
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <MUART_voidTransmitSynch+0x20>
		return NOT_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	e02c      	b.n	80008ea <MUART_voidTransmitSynch+0x7a>

	else
	{
		u8 counter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
		u8 index = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73bb      	strb	r3, [r7, #14]
		while (counter < sizeOfTransmittedData)
 8000898:	e022      	b.n	80008e0 <MUART_voidTransmitSynch+0x70>


			while(Copy_u8DataArray[index] != '\0')
			{
			// Put data in DR register to be transmitted.
		     UARTChannel[Copy_u8UartNumber]->DR = Copy_u8DataArray[index];
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	7819      	ldrb	r1, [r3, #0]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MUART_voidTransmitSynch+0x84>)
 80008a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008aa:	460a      	mov	r2, r1
 80008ac:	605a      	str	r2, [r3, #4]
		     index++;
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	3301      	adds	r3, #1
 80008b2:	73bb      	strb	r3, [r7, #14]
			// Wait untill transmition finished.
			 while(WAIT_TO_TRANSMIT);
 80008b4:	bf00      	nop
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <MUART_voidTransmitSynch+0x84>)
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	099b      	lsrs	r3, r3, #6
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f5      	beq.n	80008b6 <MUART_voidTransmitSynch+0x46>
			while(Copy_u8DataArray[index] != '\0')
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1e1      	bne.n	800089a <MUART_voidTransmitSynch+0x2a>
			}
			index = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73bb      	strb	r3, [r7, #14]
			counter ++;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	3301      	adds	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
		while (counter < sizeOfTransmittedData)
 80008e0:	7bfa      	ldrb	r2, [r7, #15]
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3f0      	bcc.n	80008ca <MUART_voidTransmitSynch+0x5a>
		}
	}
	return OK;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	08002044 	.word	0x08002044

080008f8 <MUART_u8ReceiveByteSynch>:


ReturnStatus MUART_u8ReceiveByteSynch(u8 Copy_u8UartNumber, u8  ReceivedData[], u8 sizeOfReceivedData)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]

	if ((ReceivedData == NULL) || (sizeOfReceivedData == 0))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <MUART_u8ReceiveByteSynch+0x1c>
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <MUART_u8ReceiveByteSynch+0x20>
		return NOT_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	e01f      	b.n	8000958 <MUART_u8ReceiveByteSynch+0x60>

	else
	{
		u8 counter = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]

		while (counter < sizeOfReceivedData)
 800091c:	e017      	b.n	800094e <MUART_u8ReceiveByteSynch+0x56>
		{
			// Wait untill receiving finished.
			while(WAIT_TO_RECEIVE);
 800091e:	bf00      	nop
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <MUART_u8ReceiveByteSynch+0x6c>)
 8000924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f5      	beq.n	8000920 <MUART_u8ReceiveByteSynch+0x28>
			// Getting the first byte of the register to be returned.
			ReceivedData[counter] = ( (UARTChannel[Copy_u8UartNumber]->DR));
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <MUART_u8ReceiveByteSynch+0x6c>)
 8000938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093c:	6859      	ldr	r1, [r3, #4]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	4413      	add	r3, r2
 8000944:	b2ca      	uxtb	r2, r1
 8000946:	701a      	strb	r2, [r3, #0]
			counter ++;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3301      	adds	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
		while (counter < sizeOfReceivedData)
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	429a      	cmp	r2, r3
 8000954:	d3e3      	bcc.n	800091e <MUART_u8ReceiveByteSynch+0x26>
		}

	}
   return OK;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	08002044 	.word	0x08002044

08000968 <BL_Print_Message>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void BL_Print_Message (char *format, ...)
{
 8000968:	b40f      	push	{r0, r1, r2, r3}
 800096a:	b580      	push	{r7, lr}
 800096c:	b09a      	sub	sp, #104	; 0x68
 800096e:	af00      	add	r7, sp, #0
	char message [100] = {0};
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2260      	movs	r2, #96	; 0x60
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fcd3 	bl	8001328 <memset>
	va_list args;
	va_start (args, format);
 8000982:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000986:	603b      	str	r3, [r7, #0]
	vsprintf (message, format, args);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fce8 	bl	8001364 <vsiprintf>
#if (DEBUG_METHOD  == ENABLE_UART_DEBUG_MESSAGE)
	MUART_voidTransmitSynch(BL_DEBUG_UART,(u8 *) message, 1);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff ff68 	bl	8000870 <MUART_voidTransmitSynch>
#elif(DEBUG_METHOD  == ENABLE_SPI_DEBUG_MESSAGE)
#elif(DEBUG_METHOD  == ENABLE_CAN_DEBUG_MESSAGE)
#endif
	va_end (args);
}
 80009a0:	bf00      	nop
 80009a2:	3768      	adds	r7, #104	; 0x68
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009aa:	b004      	add	sp, #16
 80009ac:	4770      	bx	lr
	...

080009b0 <BL_UART_Featch_Host_Command>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
BL_StatusType BL_UART_Featch_Host_Command (void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	BL_StatusType BL_status = BL_NACK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
	u8 data_length = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	71bb      	strb	r3, [r7, #6]
	ReturnStatus  UART_State = NOT_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	717b      	strb	r3, [r7, #5]
	/*To clear BL host buffer*/
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 80009c2:	22c8      	movs	r2, #200	; 0xc8
 80009c4:	2100      	movs	r1, #0
 80009c6:	4850      	ldr	r0, [pc, #320]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 80009c8:	f000 fcae 	bl	8001328 <memset>

	/*TODO : Receive Packet length*/
	UART_State = MUART_u8ReceiveByteSynch(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	494e      	ldr	r1, [pc, #312]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff91 	bl	80008f8 <MUART_u8ReceiveByteSynch>
 80009d6:	4603      	mov	r3, r0
 80009d8:	717b      	strb	r3, [r7, #5]
	if (UART_State != OK)
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d002      	beq.n	80009e6 <BL_UART_Featch_Host_Command+0x36>
	{
		BL_status = BL_NACK;
 80009e0:	2300      	movs	r3, #0
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	e08a      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>
	}
	else
	{
	data_length = BL_Host_Buffer[0];
 80009e6:	4b48      	ldr	r3, [pc, #288]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	71bb      	strb	r3, [r7, #6]
	/*TODO : Receive CMD_ID(1Byte) - CRC(4Byte)*/
	UART_State = MUART_u8ReceiveByteSynch(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], data_length);
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4946      	ldr	r1, [pc, #280]	; (8000b0c <BL_UART_Featch_Host_Command+0x15c>)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff ff80 	bl	80008f8 <MUART_u8ReceiveByteSynch>
 80009f8:	4603      	mov	r3, r0
 80009fa:	717b      	strb	r3, [r7, #5]
	BL_status = BL_OK;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
		if (UART_State != OK)
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d002      	beq.n	8000a0c <BL_UART_Featch_Host_Command+0x5c>
		{
			BL_status = BL_NACK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	e077      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>
		}
		else
		{
			switch (BL_Host_Buffer[1])
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000a0e:	785b      	ldrb	r3, [r3, #1]
 8000a10:	3b10      	subs	r3, #16
 8000a12:	2b11      	cmp	r3, #17
 8000a14:	d86e      	bhi.n	8000af4 <BL_UART_Featch_Host_Command+0x144>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <BL_UART_Featch_Host_Command+0x6c>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a65 	.word	0x08000a65
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a7d 	.word	0x08000a7d
 8000a28:	08000a89 	.word	0x08000a89
 8000a2c:	08000a95 	.word	0x08000a95
 8000a30:	08000aa1 	.word	0x08000aa1
 8000a34:	08000aad 	.word	0x08000aad
 8000a38:	08000ab9 	.word	0x08000ab9
 8000a3c:	08000ac5 	.word	0x08000ac5
 8000a40:	08000ad1 	.word	0x08000ad1
 8000a44:	08000af5 	.word	0x08000af5
 8000a48:	08000af5 	.word	0x08000af5
 8000a4c:	08000af5 	.word	0x08000af5
 8000a50:	08000af5 	.word	0x08000af5
 8000a54:	08000af5 	.word	0x08000af5
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000add 	.word	0x08000add
 8000a60:	08000ae9 	.word	0x08000ae9
			{
			case  CBL_GET_VER_CMD:
				Bootloader_Get_Version(BL_Host_Buffer);
 8000a64:	4828      	ldr	r0, [pc, #160]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000a66:	f000 f9b1 	bl	8000dcc <Bootloader_Get_Version>
				BL_status = BL_OK;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	71fb      	strb	r3, [r7, #7]
				break;
 8000a6e:	e045      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_GET_HELP_CMD:
				Bootloader_Get_Help(BL_Host_Buffer);
 8000a70:	4825      	ldr	r0, [pc, #148]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000a72:	f000 f9e1 	bl	8000e38 <Bootloader_Get_Help>
				BL_status = BL_OK;
 8000a76:	2301      	movs	r3, #1
 8000a78:	71fb      	strb	r3, [r7, #7]
				break;
 8000a7a:	e03f      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_GET_CID_CMD :
				Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000a7c:	4822      	ldr	r0, [pc, #136]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000a7e:	f000 fa0d 	bl	8000e9c <Bootloader_Get_Chip_Identification_Number>
				BL_status = BL_OK;
 8000a82:	2301      	movs	r3, #1
 8000a84:	71fb      	strb	r3, [r7, #7]
				break;
 8000a86:	e039      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_GET_RDP_STATUS_CMD    :
				BL_Print_Message ("Read the flash read protection level ...\n");
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <BL_UART_Featch_Host_Command+0x160>)
 8000a8a:	f7ff ff6d 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
				break;
 8000a92:	e033      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_GO_TO_ADDR_CMD:
				Bootloader_Jumb_To_Address(BL_Host_Buffer);
 8000a94:	481c      	ldr	r0, [pc, #112]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000a96:	f000 fa3f 	bl	8000f18 <Bootloader_Jumb_To_Address>
				BL_status = BL_OK;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
				break;
 8000a9e:	e02d      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_FLASH_ERASE_CMD       :
				Bootloader_Erase_Flash(BL_Host_Buffer);
 8000aa0:	4819      	ldr	r0, [pc, #100]	; (8000b08 <BL_UART_Featch_Host_Command+0x158>)
 8000aa2:	f000 fa91 	bl	8000fc8 <Bootloader_Erase_Flash>
				BL_status = BL_OK;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
				break;
 8000aaa:	e027      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_MEM_WRITE_CMD         :
				BL_Print_Message ("Write data on different memories of the MCU...\n");
 8000aac:	4819      	ldr	r0, [pc, #100]	; (8000b14 <BL_UART_Featch_Host_Command+0x164>)
 8000aae:	f7ff ff5b 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
				break;
 8000ab6:	e021      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_EN_R_W_PROTECT_CMD    :
				BL_Print_Message ("Enable read write protect on different sectors of the user flash ....\n");
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <BL_UART_Featch_Host_Command+0x168>)
 8000aba:	f7ff ff55 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
				break;
 8000ac2:	e01b      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_MEM_READ_CMD          :
				BL_Print_Message ("Read all data fromdifferent memories of MCU...\n");
 8000ac4:	4815      	ldr	r0, [pc, #84]	; (8000b1c <BL_UART_Featch_Host_Command+0x16c>)
 8000ac6:	f7ff ff4f 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
				break;
 8000ace:	e015      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_READ_SECTOR_STATUS_CMD:
				BL_Print_Message ("Read all sector protection status...\n");
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <BL_UART_Featch_Host_Command+0x170>)
 8000ad2:	f7ff ff49 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	71fb      	strb	r3, [r7, #7]
				break;
 8000ada:	e00f      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_OTP_READ_CMD          :
				BL_Print_Message ("Read the OTP connects....\n");
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <BL_UART_Featch_Host_Command+0x174>)
 8000ade:	f7ff ff43 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
				break;
 8000ae6:	e009      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			case  CBL_DIS_R_W_PROJECT_CMD   :
				BL_Print_Message ("Disable read write protection on different sectors of the user flash...\n");
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <BL_UART_Featch_Host_Command+0x178>)
 8000aea:	f7ff ff3d 	bl	8000968 <BL_Print_Message>
				BL_status = BL_OK;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
				break;
 8000af2:	e003      	b.n	8000afc <BL_UART_Featch_Host_Command+0x14c>

			default :
				BL_Print_Message("Invalid command code received from host ... \n");
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <BL_UART_Featch_Host_Command+0x17c>)
 8000af6:	f7ff ff37 	bl	8000968 <BL_Print_Message>
				break;
 8000afa:	bf00      	nop
			}
		}
	}
	return BL_status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000012c 	.word	0x2000012c
 8000b0c:	2000012d 	.word	0x2000012d
 8000b10:	08001bc4 	.word	0x08001bc4
 8000b14:	08001bf0 	.word	0x08001bf0
 8000b18:	08001c20 	.word	0x08001c20
 8000b1c:	08001c68 	.word	0x08001c68
 8000b20:	08001c98 	.word	0x08001c98
 8000b24:	08001cc0 	.word	0x08001cc0
 8000b28:	08001cdc 	.word	0x08001cdc
 8000b2c:	08001d28 	.word	0x08001d28

08000b30 <Bootloader_Send_Data_To_Host>:
static void Bootloader_Send_Data_To_Host (u8 *Data_Buffer, u8 Data_Len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	MUART_voidTransmitSynch(BL_HOST_COMMUNICATION_UART, Data_Buffer, Data_Len);
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fe94 	bl	8000870 <MUART_voidTransmitSynch>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Bootloader_Send_ACK>:

static void           Bootloader_Send_ACK						  (u8 Replay_len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	u8 ACK_Val [2] = {0};
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	81bb      	strh	r3, [r7, #12]
	ACK_Val [0] = CBL_SEND_ACK;
 8000b5e:	23cd      	movs	r3, #205	; 0xcd
 8000b60:	733b      	strb	r3, [r7, #12]
	ACK_Val [1] = Replay_len;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	737b      	strb	r3, [r7, #13]
	MUART_voidTransmitSynch(BL_HOST_COMMUNICATION_UART,(u8 *) ACK_Val, 1);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fe7e 	bl	8000870 <MUART_voidTransmitSynch>
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("ACK is : %x and Replay Len: %d sent..  \n", ACK_Val [0],  ACK_Val [1]);
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	4619      	mov	r1, r3
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <Bootloader_Send_ACK+0x3c>)
 8000b7e:	f7ff fef3 	bl	8000968 <BL_Print_Message>
#endif
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08001d58 	.word	0x08001d58

08000b90 <Bootloader_Send_NACK>:
static void           Bootloader_Send_NACK						  ()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
	u8 NACK_Val = CBL_SEND_NACK;
 8000b96:	23ab      	movs	r3, #171	; 0xab
 8000b98:	71fb      	strb	r3, [r7, #7]
	 MUART_voidTransmitSynch(BL_HOST_COMMUNICATION_UART, &NACK_Val, 1);
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fe65 	bl	8000870 <MUART_voidTransmitSynch>
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("NACK is : %x sent..  \n", NACK_Val);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <Bootloader_Send_NACK+0x28>)
 8000bac:	f7ff fedc 	bl	8000968 <BL_Print_Message>
#endif

}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	08001d84 	.word	0x08001d84

08000bbc <Bootloader_CRC_Verify>:

static CRC_VerifyType Bootloader_CRC_Verify ( u8 *pData, u32 Data_Len, u32 Host_CRC)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("CRC Verifying..  \n");
 8000bc8:	481b      	ldr	r0, [pc, #108]	; (8000c38 <Bootloader_CRC_Verify+0x7c>)
 8000bca:	f7ff fecd 	bl	8000968 <BL_Print_Message>
#endif

	CRC_VerifyType CRC_State = CRC_FAILD;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	77fb      	strb	r3, [r7, #31]
	u32 MCU_CRC_Calculated = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
		u8 Data_Counter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	75fb      	strb	r3, [r7, #23]
		u32 Data_Buffer = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
		/* Calculate CRC32 */
		for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]
 8000be2:	e00e      	b.n	8000c02 <Bootloader_CRC_Verify+0x46>
			Data_Buffer = (u32)pData[Data_Counter];
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	613b      	str	r3, [r7, #16]
			MCU_CRC_Calculated = MCRC_u32CalculateCrcHw( &Data_Buffer, 1);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fac7 	bl	8000188 <MCRC_u32CalculateCrcHw>
 8000bfa:	61b8      	str	r0, [r7, #24]
		for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	75fb      	strb	r3, [r7, #23]
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d8ec      	bhi.n	8000be4 <Bootloader_CRC_Verify+0x28>
		}
		/*Reset CRC*/
		MCRC_voidReset();
 8000c0a:	f7ff fab1 	bl	8000170 <MCRC_voidReset>
		if (MCU_CRC_Calculated == Host_CRC)
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d105      	bne.n	8000c22 <Bootloader_CRC_Verify+0x66>
		{
			CRC_State = CRC_PASSED;
 8000c16:	2301      	movs	r3, #1
 8000c18:	77fb      	strb	r3, [r7, #31]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("CRC_PASSED..  \n");
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <Bootloader_CRC_Verify+0x80>)
 8000c1c:	f7ff fea4 	bl	8000968 <BL_Print_Message>
 8000c20:	e004      	b.n	8000c2c <Bootloader_CRC_Verify+0x70>
#endif
		}
		else
		{
			CRC_State = CRC_FAILD;
 8000c22:	2300      	movs	r3, #0
 8000c24:	77fb      	strb	r3, [r7, #31]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("CRC_FAILD..  \n");
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <Bootloader_CRC_Verify+0x84>)
 8000c28:	f7ff fe9e 	bl	8000968 <BL_Print_Message>
#endif
		}

	return CRC_State;
 8000c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08001d9c 	.word	0x08001d9c
 8000c3c:	08001db0 	.word	0x08001db0
 8000c40:	08001dc0 	.word	0x08001dc0

08000c44 <Bootloader_Address_Verify>:

static Address_VerifyType  Bootloader_Address_Verify   ( u32 Address)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	Address_VerifyType Address_Status = ADDRESS_IS_INVALID;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
	
	if ((Address >= FLASH_BASE)&&(Address <= FLASH_END_ADDRESS))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000c56:	d309      	bcc.n	8000c6c <Bootloader_Address_Verify+0x28>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <Bootloader_Address_Verify+0x58>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d805      	bhi.n	8000c6c <Bootloader_Address_Verify+0x28>
	{
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Address Accepted, Written in Flash ..  \n");
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <Bootloader_Address_Verify+0x5c>)
 8000c62:	f7ff fe81 	bl	8000968 <BL_Print_Message>
#endif
		Address_Status = ADDRESS_IS_VALID;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e012      	b.n	8000c92 <Bootloader_Address_Verify+0x4e>
	}
	else if ((Address >= SRAM_BASE)&&(Address <= SRAM_END_ADDRESS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c72:	d309      	bcc.n	8000c88 <Bootloader_Address_Verify+0x44>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <Bootloader_Address_Verify+0x60>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d805      	bhi.n	8000c88 <Bootloader_Address_Verify+0x44>
	{
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Address Accepted, Written in RAM ..  \n");
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <Bootloader_Address_Verify+0x64>)
 8000c7e:	f7ff fe73 	bl	8000968 <BL_Print_Message>
#endif
		Address_Status = ADDRESS_IS_VALID;
 8000c82:	2301      	movs	r3, #1
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	e004      	b.n	8000c92 <Bootloader_Address_Verify+0x4e>
	}
	else 
	{
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Address FAILD ..  \n");
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <Bootloader_Address_Verify+0x68>)
 8000c8a:	f7ff fe6d 	bl	8000968 <BL_Print_Message>
#endif
		Address_Status = ADDRESS_IS_INVALID;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
	}
		
	return Address_Status;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08010000 	.word	0x08010000
 8000ca0:	08001dd0 	.word	0x08001dd0
 8000ca4:	20005000 	.word	0x20005000
 8000ca8:	08001dfc 	.word	0x08001dfc
 8000cac:	08001e24 	.word	0x08001e24

08000cb0 <Bootloader_Preforn_Flash_Erase>:

static u8 Bootloader_Preforn_Flash_Erase (u8 pageNum , u8 NumOfPage)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	460a      	mov	r2, r1
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	71bb      	strb	r3, [r7, #6]
	

	/*local var Address_Status to get Erase status */
	u8 Erase_Status = UNSUCCESSFUL_ERASE;
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <Bootloader_Preforn_Flash_Erase+0xf4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	73fb      	strb	r3, [r7, #15]
	ReturnStatus Status = NOT_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	737b      	strb	r3, [r7, #13]
	if (FLASH_MAX_PAGE_NUM >= NumOfPage)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b07      	cmp	r3, #7
 8000cce:	d85c      	bhi.n	8000d8a <Bootloader_Preforn_Flash_Erase+0xda>
	{
		
		/*Num of page is in range*/
		if ((FLASH_MAX_PAGE_NUM > pageNum) || (MASS_ERASE == pageNum))
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <Bootloader_Preforn_Flash_Erase+0x2c>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2bff      	cmp	r3, #255	; 0xff
 8000cda:	d14f      	bne.n	8000d7c <Bootloader_Preforn_Flash_Erase+0xcc>
		{
			/*Unlock Falsh*/
			if (MASS_ERASE == pageNum)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2bff      	cmp	r3, #255	; 0xff
 8000ce0:	d108      	bne.n	8000cf4 <Bootloader_Preforn_Flash_Erase+0x44>
			{
#ifdef BL_DEBUG_INFO
BL_Print_Message("Mass erase running....\n");						
 8000ce2:	4831      	ldr	r0, [pc, #196]	; (8000da8 <Bootloader_Preforn_Flash_Erase+0xf8>)
 8000ce4:	f7ff fe40 	bl	8000968 <BL_Print_Message>
#endif		
				/*mass erase*/
				MFLASH_massErase();
 8000ce8:	f000 fa20 	bl	800112c <MFLASH_massErase>
				Erase_Status = SUCCESSFUL_ERASE;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <Bootloader_Preforn_Flash_Erase+0xfc>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	73fb      	strb	r3, [r7, #15]
			if (MASS_ERASE == pageNum)
 8000cf2:	e050      	b.n	8000d96 <Bootloader_Preforn_Flash_Erase+0xe6>
			}
			else 
			{
				/*sector erase*/
				u8 PageCounter = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73bb      	strb	r3, [r7, #14]
				u8 PageMAxCounter = (pageNum + NumOfPage);
 8000cf8:	79fa      	ldrb	r2, [r7, #7]
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	733b      	strb	r3, [r7, #12]
				for ( PageCounter = pageNum; PageCounter < PageMAxCounter ; PageCounter ++)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	73bb      	strb	r3, [r7, #14]
 8000d04:	e035      	b.n	8000d72 <Bootloader_Preforn_Flash_Erase+0xc2>
				{
					if ( pageNum < FLASH_MAX_PAGE_NUM  )
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b06      	cmp	r3, #6
 8000d0a:	d827      	bhi.n	8000d5c <Bootloader_Preforn_Flash_Erase+0xac>
					{
						/*Unlock Flash*/
						MFLASH_unlock();
 8000d0c:	f000 f9c0 	bl	8001090 <MFLASH_unlock>
					  Status	= MFLASH_erasePage(PAGE_ARRAY[PageCounter]);	
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <Bootloader_Preforn_Flash_Erase+0x100>)
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f9cb 	bl	80010b4 <MFLASH_erasePage>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	737b      	strb	r3, [r7, #13]
						if (OK == Status)
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10c      	bne.n	8000d42 <Bootloader_Preforn_Flash_Erase+0x92>
						{
#ifdef BL_DEBUG_INFO
BL_Print_Message(" Erasing Page %d with address 0x%X done successfully....\n",PageCounter,  PAGE_ARRAY[PageCounter] );						
 8000d28:	7bb9      	ldrb	r1, [r7, #14]
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <Bootloader_Preforn_Flash_Erase+0x100>)
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	461a      	mov	r2, r3
 8000d34:	481f      	ldr	r0, [pc, #124]	; (8000db4 <Bootloader_Preforn_Flash_Erase+0x104>)
 8000d36:	f7ff fe17 	bl	8000968 <BL_Print_Message>
#endif					
						Erase_Status = SUCCESSFUL_ERASE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <Bootloader_Preforn_Flash_Erase+0xfc>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e014      	b.n	8000d6c <Bootloader_Preforn_Flash_Erase+0xbc>
						}
						else	
						{
#ifdef BL_DEBUG_INFO
BL_Print_Message("Error Erasing  Page %d with address 0x%X ....\n",PageCounter,  PAGE_ARRAY[PageCounter] );						
 8000d42:	7bb9      	ldrb	r1, [r7, #14]
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <Bootloader_Preforn_Flash_Erase+0x100>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <Bootloader_Preforn_Flash_Erase+0x108>)
 8000d50:	f7ff fe0a 	bl	8000968 <BL_Print_Message>
#endif					
						Erase_Status = UNSUCCESSFUL_ERASE;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <Bootloader_Preforn_Flash_Erase+0xf4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e007      	b.n	8000d6c <Bootloader_Preforn_Flash_Erase+0xbc>
							
					}/*if*/
					else 
					{
#ifdef BL_DEBUG_INFO
BL_Print_Message(" Page %d not available....\n", PageCounter);						
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <Bootloader_Preforn_Flash_Erase+0x10c>)
 8000d62:	f7ff fe01 	bl	8000968 <BL_Print_Message>
#endif
				Erase_Status = INVALID_PAGE_NUMBER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <Bootloader_Preforn_Flash_Erase+0x110>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	73fb      	strb	r3, [r7, #15]
				for ( PageCounter = pageNum; PageCounter < PageMAxCounter ; PageCounter ++)
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	7bba      	ldrb	r2, [r7, #14]
 8000d74:	7b3b      	ldrb	r3, [r7, #12]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3c5      	bcc.n	8000d06 <Bootloader_Preforn_Flash_Erase+0x56>
			if (MASS_ERASE == pageNum)
 8000d7a:	e00c      	b.n	8000d96 <Bootloader_Preforn_Flash_Erase+0xe6>
			}/*else*/
			
		}/*		if ((FLASH_MAX_PAGE_NUM > pageNum) || (MASS_ERASE == pageNum))*/
		else 
		{
		Erase_Status = INVALID_PAGE_NUMBER;
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <Bootloader_Preforn_Flash_Erase+0x110>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	73fb      	strb	r3, [r7, #15]
#ifdef BL_DEBUG_INFO
BL_Print_Message(" Page Number not in range ....\n" );						
 8000d82:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <Bootloader_Preforn_Flash_Erase+0x114>)
 8000d84:	f7ff fdf0 	bl	8000968 <BL_Print_Message>
 8000d88:	e005      	b.n	8000d96 <Bootloader_Preforn_Flash_Erase+0xe6>
		}
	}/*	if (FLASH_MAX_PAGE_NUM >= NumOfPage)*/
	else 
	{
#ifdef BL_DEBUG_INFO
BL_Print_Message(" Number of pages is not allowed ....\n" );						
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <Bootloader_Preforn_Flash_Erase+0x118>)
 8000d8c:	f7ff fdec 	bl	8000968 <BL_Print_Message>
#endif
		/*Num of page is out of range*/
	 Erase_Status = UNSUCCESSFUL_ERASE;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <Bootloader_Preforn_Flash_Erase+0xf4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	73fb      	strb	r3, [r7, #15]
	}
	MFLASH_lock();
 8000d96:	f000 f96d 	bl	8001074 <MFLASH_lock>
	return Erase_Status;
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000000d 	.word	0x2000000d
 8000da8:	08001e38 	.word	0x08001e38
 8000dac:	2000000e 	.word	0x2000000e
 8000db0:	20000010 	.word	0x20000010
 8000db4:	08001e50 	.word	0x08001e50
 8000db8:	08001e8c 	.word	0x08001e8c
 8000dbc:	08001ebc 	.word	0x08001ebc
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	08001ed8 	.word	0x08001ed8
 8000dc8:	08001ef8 	.word	0x08001ef8

08000dcc <Bootloader_Get_Version>:
/**************************************************************************************************/
static void Bootloader_Get_Version 					  ( u8 * Host_Buffer)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	 ***************BOOTLOADER PACKET (6Byte)*****************
	 *******|    1     |   2  | 3 | 4 | 5 | 6 |***************
	 *******|Packet_Len|CMD_ID|CRC|CRC|CRC|CRC|***************
	 *********************************************************/
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Read the bootloader version from MCU..  \n");
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <Bootloader_Get_Version+0x64>)
 8000dd6:	f7ff fdc7 	bl	8000968 <BL_Print_Message>
#endif

	u8 BL_VERSION[4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <Bootloader_Get_Version+0x68>)
 8000ddc:	60fb      	str	r3, [r7, #12]
	u16 Host_CMD_Packet_Len = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	82fb      	strh	r3, [r7, #22]
	u32 Host_CRC32 = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

	/*Extract CRC - Packet length sent by host */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((u32* )((Host_Buffer + (u32)Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	3b04      	subs	r3, #4
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]

	/*CRC Verification */
	if (CRC_PASSED == Bootloader_CRC_Verify( &Host_Buffer[0], (Host_CMD_Packet_Len - 4), Host_CRC32))
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fed9 	bl	8000bbc <Bootloader_CRC_Verify>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d109      	bne.n	8000e24 <Bootloader_Get_Version+0x58>
	{
		Bootloader_Send_ACK(4);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f7ff fe9d 	bl	8000b50 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(BL_VERSION, 1);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe87 	bl	8000b30 <Bootloader_Send_Data_To_Host>
	else
	{
		Bootloader_Send_NACK();
	}

}
 8000e22:	e001      	b.n	8000e28 <Bootloader_Get_Version+0x5c>
		Bootloader_Send_NACK();
 8000e24:	f7ff feb4 	bl	8000b90 <Bootloader_Send_NACK>
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08001f20 	.word	0x08001f20
 8000e34:	01010264 	.word	0x01010264

08000e38 <Bootloader_Get_Help>:


static void Bootloader_Get_Help 					  ( u8 Host_Buffer[])
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	 ***************BOOTLOADER PACKET (6Byte)*****************
	 *******|    1     |   2  | 3 | 4 | 5 | 6 |***************
	 *******|Packet_Len|CMD_ID|CRC|CRC|CRC|CRC|***************
	 *********************************************************/
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Read the command supported by the bootloader.\n");
 8000e40:	4814      	ldr	r0, [pc, #80]	; (8000e94 <Bootloader_Get_Help+0x5c>)
 8000e42:	f7ff fd91 	bl	8000968 <BL_Print_Message>
#endif

	u16 Host_CMD_Packet_Len = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	81fb      	strh	r3, [r7, #14]
	u32 Host_CRC32 = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]

	/*Extract CRC - Packet length sent by host */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((u32 *) ((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60bb      	str	r3, [r7, #8]

	/*CRC Verification */
	if (CRC_PASSED == Bootloader_CRC_Verify( (u8 *)Host_Buffer, (Host_CMD_Packet_Len - 4), Host_CRC32))
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	3b04      	subs	r3, #4
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fea5 	bl	8000bbc <Bootloader_CRC_Verify>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d107      	bne.n	8000e88 <Bootloader_Get_Help+0x50>
	{
		Bootloader_Send_ACK(12);
 8000e78:	200c      	movs	r0, #12
 8000e7a:	f7ff fe69 	bl	8000b50 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Support_CMD, 12);
 8000e7e:	210c      	movs	r1, #12
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <Bootloader_Get_Help+0x60>)
 8000e82:	f7ff fe55 	bl	8000b30 <Bootloader_Send_Data_To_Host>
	}
	else
	{
		Bootloader_Send_NACK();
	}
}
 8000e86:	e001      	b.n	8000e8c <Bootloader_Get_Help+0x54>
		Bootloader_Send_NACK();
 8000e88:	f7ff fe82 	bl	8000b90 <Bootloader_Send_NACK>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08001f4c 	.word	0x08001f4c
 8000e98:	20000000 	.word	0x20000000

08000e9c <Bootloader_Get_Chip_Identification_Number>:

static void Bootloader_Get_Chip_Identification_Number ( u8 *Host_Buffer)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Read the MCU chip identification number ..\n");
 8000ea4:	481a      	ldr	r0, [pc, #104]	; (8000f10 <Bootloader_Get_Chip_Identification_Number+0x74>)
 8000ea6:	f7ff fd5f 	bl	8000968 <BL_Print_Message>
#endif
	u16 Host_CMD_Packet_Len = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	82fb      	strh	r3, [r7, #22]
	u32 Host_CRC32 = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
	u16 Mcu_Identification_Num = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	81fb      	strh	r3, [r7, #14]

	/*Extract CRC - Packet length sent by host */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((u32 *) ((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000ec0:	8afb      	ldrh	r3, [r7, #22]
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]

#define DBGMCU_IDCODE   *((volatile u32 *) (0xE0042000))

	Mcu_Identification_Num = (u16)((DBGMCU_IDCODE) & (0x00000FFF));
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <Bootloader_Get_Chip_Identification_Number+0x78>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	81fb      	strh	r3, [r7, #14]

	/*CRC Verification */
	if (CRC_PASSED == Bootloader_CRC_Verify( (u8 *)Host_Buffer, (Host_CMD_Packet_Len - 4), Host_CRC32))
 8000eda:	8afb      	ldrh	r3, [r7, #22]
 8000edc:	3b04      	subs	r3, #4
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fe6a 	bl	8000bbc <Bootloader_CRC_Verify>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d109      	bne.n	8000f02 <Bootloader_Get_Chip_Identification_Number+0x66>
	{
		/*Get MCU chip identification number*/
		/*Send MCU chip identification number To Host*/
		Bootloader_Send_ACK(2);
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f7ff fe2e 	bl	8000b50 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((u8 *)&Mcu_Identification_Num, 2);
 8000ef4:	f107 030e 	add.w	r3, r7, #14
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe18 	bl	8000b30 <Bootloader_Send_Data_To_Host>
	{
		Bootloader_Send_NACK();
	}


}
 8000f00:	e001      	b.n	8000f06 <Bootloader_Get_Chip_Identification_Number+0x6a>
		Bootloader_Send_NACK();
 8000f02:	f7ff fe45 	bl	8000b90 <Bootloader_Send_NACK>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08001f7c 	.word	0x08001f7c
 8000f14:	e0042000 	.word	0xe0042000

08000f18 <Bootloader_Jumb_To_Address>:

static void Bootloader_Jumb_To_Address         	      ( u8 *Host_Buffer)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Jumb bootloader to specific address...\n");
 8000f20:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <Bootloader_Jumb_To_Address+0xa8>)
 8000f22:	f7ff fd21 	bl	8000968 <BL_Print_Message>
#endif

	u16 Host_CMD_Packet_Len = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	83fb      	strh	r3, [r7, #30]
	u32 Host_CRC32 = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
	u32 Host_Jumb_Address = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
	Address_VerifyType Host_Address_Status = ADDRESS_IS_INVALID;
 8000f32:	2300      	movs	r3, #0
 8000f34:	74fb      	strb	r3, [r7, #19]

	/*Extract CRC - Packet length sent by host */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((u32 *) ((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000f40:	8bfb      	ldrh	r3, [r7, #30]
 8000f42:	3b04      	subs	r3, #4
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]


	/*CRC Verification */
	if (CRC_PASSED == Bootloader_CRC_Verify( (u8 *)Host_Buffer, (Host_CMD_Packet_Len - 4), Host_CRC32))
 8000f4c:	8bfb      	ldrh	r3, [r7, #30]
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fe31 	bl	8000bbc <Bootloader_CRC_Verify>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d123      	bne.n	8000fa8 <Bootloader_Jumb_To_Address+0x90>
	{
		/*ACK For CRC Passed*/
		Bootloader_Send_ACK(1);	
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fdf5 	bl	8000b50 <Bootloader_Send_ACK>
		/*Get Host_Jumb_Address From Packet "Host_Buffer"*/
		Host_Jumb_Address = *((u32 *)&Host_Buffer[2]);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f6c:	617b      	str	r3, [r7, #20]
		
		/*Verify  Host Jumb Address*/
		Host_Address_Status = Bootloader_Address_Verify( Host_Jumb_Address );
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff fe68 	bl	8000c44 <Bootloader_Address_Verify>
 8000f74:	4603      	mov	r3, r0
 8000f76:	74fb      	strb	r3, [r7, #19]
		if (ADDRESS_IS_VALID == Host_Address_Status)
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10e      	bne.n	8000f9c <Bootloader_Jumb_To_Address+0x84>
		{
			/*report host Verifying Address_Status */
			Bootloader_Send_Data_To_Host((u8 *)Host_Address_Status, 1);
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdd4 	bl	8000b30 <Bootloader_Send_Data_To_Host>
			void (*MainApp) (void) = (void *) (Host_Jumb_Address +1 );
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
#ifdef BL_DEBUG_INFO
	BL_Print_Message ("Jumb to 0x%X\n", MainApp);
 8000f8e:	68f9      	ldr	r1, [r7, #12]
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <Bootloader_Jumb_To_Address+0xac>)
 8000f92:	f7ff fce9 	bl	8000968 <BL_Print_Message>
#endif
			MainApp();
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4798      	blx	r3
		Bootloader_Send_Data_To_Host((u8 *)Host_Address_Status, 1);			
	}


	
}
 8000f9a:	e00c      	b.n	8000fb6 <Bootloader_Jumb_To_Address+0x9e>
			Bootloader_Send_Data_To_Host((u8 *)Host_Address_Status, 1);			
 8000f9c:	7cfb      	ldrb	r3, [r7, #19]
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fdc5 	bl	8000b30 <Bootloader_Send_Data_To_Host>
}
 8000fa6:	e006      	b.n	8000fb6 <Bootloader_Jumb_To_Address+0x9e>
		Bootloader_Send_NACK();
 8000fa8:	f7ff fdf2 	bl	8000b90 <Bootloader_Send_NACK>
		Bootloader_Send_Data_To_Host((u8 *)Host_Address_Status, 1);			
 8000fac:	7cfb      	ldrb	r3, [r7, #19]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fdbd 	bl	8000b30 <Bootloader_Send_Data_To_Host>
}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	08001fa8 	.word	0x08001fa8
 8000fc4:	08001fd0 	.word	0x08001fd0

08000fc8 <Bootloader_Erase_Flash>:

static void   Bootloader_Erase_Flash ( u8 *Host_Buffer)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	 ****************************BOOTLOADER PACKET (8Byte)***********************
	 *******|    1     |   2  | 	3 	|    4     | 5 | 6 | 7 | 8 |***************
	 *******|Packet_Len|CMD_ID|PageNum|NumOfPages|CRC|CRC|CRC|CRC|***************
	 ***************************************************************************/
#ifdef BL_DEBUG_INFO
			BL_Print_Message ("Mass erase or sectors erase of the user flash...\n");
 8000fd0:	4824      	ldr	r0, [pc, #144]	; (8001064 <Bootloader_Erase_Flash+0x9c>)
 8000fd2:	f7ff fcc9 	bl	8000968 <BL_Print_Message>
#endif

	u16 Host_CMD_Packet_Len = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	82fb      	strh	r3, [r7, #22]
	u32 Host_CRC32 = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
	u8 Erase_Status = INVALID_PAGE_NUMBER ;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <Bootloader_Erase_Flash+0xa0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	73fb      	strb	r3, [r7, #15]

	/*Extract CRC - Packet length sent by host */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((u32 *) ((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000fee:	8afb      	ldrh	r3, [r7, #22]
 8000ff0:	3b04      	subs	r3, #4
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	613b      	str	r3, [r7, #16]
	
	/*CRC Verification */
	if (CRC_PASSED == Bootloader_CRC_Verify( (u8 *)Host_Buffer, (Host_CMD_Packet_Len - 4), Host_CRC32))
 8000ffa:	8afb      	ldrh	r3, [r7, #22]
 8000ffc:	3b04      	subs	r3, #4
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fdda 	bl	8000bbc <Bootloader_CRC_Verify>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d124      	bne.n	8001058 <Bootloader_Erase_Flash+0x90>
	{
		/*ACK For CRC Passed*/
		Bootloader_Send_ACK(1);	
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fd9e 	bl	8000b50 <Bootloader_Send_ACK>
		
		
		Erase_Status =	Bootloader_Preforn_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3302      	adds	r3, #2
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3303      	adds	r3, #3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f7ff fe44 	bl	8000cb0 <Bootloader_Preforn_Flash_Erase>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
		if (SUCCESSFUL_ERASE == Erase_Status)
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <Bootloader_Erase_Flash+0xa4>)
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	429a      	cmp	r2, r3
 8001034:	d109      	bne.n	800104a <Bootloader_Erase_Flash+0x82>
		{
	//		report host Erasing page Status 
			Bootloader_Send_Data_To_Host( &Erase_Status, 1);			
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fd77 	bl	8000b30 <Bootloader_Send_Data_To_Host>
#ifdef BL_DEBUG_INFO
			BL_Print_Message ("Successful Erase...\n");
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <Bootloader_Erase_Flash+0xa8>)
 8001044:	f7ff fc90 	bl	8000968 <BL_Print_Message>
	}
	else 
	{
	Bootloader_Send_NACK();		
	}
}
 8001048:	e008      	b.n	800105c <Bootloader_Erase_Flash+0x94>
				Bootloader_Send_Data_To_Host(&Erase_Status, 1);			
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fd6d 	bl	8000b30 <Bootloader_Send_Data_To_Host>
}
 8001056:	e001      	b.n	800105c <Bootloader_Erase_Flash+0x94>
	Bootloader_Send_NACK();		
 8001058:	f7ff fd9a 	bl	8000b90 <Bootloader_Send_NACK>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08001fe0 	.word	0x08001fe0
 8001068:	2000000c 	.word	0x2000000c
 800106c:	2000000e 	.word	0x2000000e
 8001070:	08002014 	.word	0x08002014

08001074 <MFLASH_lock>:
										};



void MFLASH_lock (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <MFLASH_lock+0x18>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <MFLASH_lock+0x18>)
 800107e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001082:	6113      	str	r3, [r2, #16]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40022000 	.word	0x40022000

08001090 <MFLASH_unlock>:

void MFLASH_unlock (void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	FLASH->KEYR = KEY1;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <MFLASH_unlock+0x18>)
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <MFLASH_unlock+0x1c>)
 8001098:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = KEY2;
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <MFLASH_unlock+0x18>)
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <MFLASH_unlock+0x20>)
 800109e:	605a      	str	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40022000 	.word	0x40022000
 80010ac:	45670123 	.word	0x45670123
 80010b0:	cdef89ab 	.word	0xcdef89ab

080010b4 <MFLASH_erasePage>:

	return status;
}

ReturnStatus MFLASH_erasePage (u32  desiredAddress)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	ReturnStatus status = OK;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
	u32 lockStatus;

	/* Checking if flash is unlocked */
	lockStatus = FLASH->CR & FLASH_CR_LOCK;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MFLASH_erasePage+0x74>)
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c8:	60bb      	str	r3, [r7, #8]
	if (lockStatus == FLASH_CR_LOCK)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b80      	cmp	r3, #128	; 0x80
 80010ce:	d102      	bne.n	80010d6 <MFLASH_erasePage+0x22>
	{
		status = NOT_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e022      	b.n	800111c <MFLASH_erasePage+0x68>
	}
	else
	{
		/* Checking that there is no flash memory operation is ongoing*/
		while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 80010d6:	bf00      	nop
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MFLASH_erasePage+0x74>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d0f9      	beq.n	80010d8 <MFLASH_erasePage+0x24>

		/* Choose flash erasing */
		FLASH->CR |= FLASH_CR_PER;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MFLASH_erasePage+0x74>)
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <MFLASH_erasePage+0x74>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6113      	str	r3, [r2, #16]

		/* Choosing address to erase */
		FLASH->AR = desiredAddress;
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <MFLASH_erasePage+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6153      	str	r3, [r2, #20]

		/* Starting erasing */
		FLASH->CR |= FLASH_CR_STRT;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MFLASH_erasePage+0x74>)
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MFLASH_erasePage+0x74>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	6113      	str	r3, [r2, #16]

		/* Waiting on busy flag */
		while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 8001102:	bf00      	nop
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MFLASH_erasePage+0x74>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d0f9      	beq.n	8001104 <MFLASH_erasePage+0x50>


		/* Stopping flash erasing */
		FLASH->CR &= ~FLASH_CR_PER;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MFLASH_erasePage+0x74>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <MFLASH_erasePage+0x74>)
 8001116:	f023 0302 	bic.w	r3, r3, #2
 800111a:	6113      	str	r3, [r2, #16]
	}
	return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40022000 	.word	0x40022000

0800112c <MFLASH_massErase>:

ReturnStatus MFLASH_massErase(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
	ReturnStatus status = OK;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
	u32 lockStatus;

	/* Checking if flash is unlocked */
	lockStatus = FLASH->CR & FLASH_CR_LOCK;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MFLASH_massErase+0x6c>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	603b      	str	r3, [r7, #0]
	if (lockStatus == FLASH_CR_LOCK)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b80      	cmp	r3, #128	; 0x80
 8001144:	d102      	bne.n	800114c <MFLASH_massErase+0x20>
	{
		status = NOT_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e01f      	b.n	800118c <MFLASH_massErase+0x60>
	}
	else
	{
		/* Checking that there is no flash memory operation is ongoing*/
		while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 800114c:	bf00      	nop
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MFLASH_massErase+0x6c>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d0f9      	beq.n	800114e <MFLASH_massErase+0x22>

		/* Choose flash mass erasing */
		FLASH->CR |= FLASH_CR_MER;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MFLASH_massErase+0x6c>)
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <MFLASH_massErase+0x6c>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6113      	str	r3, [r2, #16]

		/* Starting erasing */
		FLASH->CR |= FLASH_CR_STRT;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MFLASH_massErase+0x6c>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <MFLASH_massErase+0x6c>)
 800116c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001170:	6113      	str	r3, [r2, #16]

		/* Waiting on busy flag */
		while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY);
 8001172:	bf00      	nop
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MFLASH_massErase+0x6c>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d0f9      	beq.n	8001174 <MFLASH_massErase+0x48>

		/* Stopping flash erasing */
		FLASH->CR &= ~FLASH_CR_MER;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <MFLASH_massErase+0x6c>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <MFLASH_massErase+0x6c>)
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	6113      	str	r3, [r2, #16]
	}
	return status;
 800118c:	79fb      	ldrb	r3, [r7, #7]
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40022000 	.word	0x40022000

0800119c <main>:
#include "../Inc/Bootloader/bootloader.h"

extern u32 PAGE_ARRAY[];

int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
BL_StatusType CommandStatus = BL_NACK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]

	/*RCC init*/
 	MRCC_voidInit();
 80011a6:	f7ff f9b5 	bl	8000514 <MRCC_voidInit>
	MRCC_voidPreipheralEnable(APB2, IOPA_ENABLE_BIT);
 80011aa:	2102      	movs	r1, #2
 80011ac:	2002      	movs	r0, #2
 80011ae:	f7ff fac5 	bl	800073c <MRCC_voidPreipheralEnable>
	MRCC_voidPreipheralEnable(AHB,  CRCEN_ENABLE_BIT);
 80011b2:	2106      	movs	r1, #6
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fac1 	bl	800073c <MRCC_voidPreipheralEnable>
	MRCC_voidPreipheralEnable(APB2, USART1_ENABLE_BIT);
 80011ba:	210e      	movs	r1, #14
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff fabd 	bl	800073c <MRCC_voidPreipheralEnable>
	MRCC_voidPreipheralEnable(APB1, USART2_ENABLE_BIT);
 80011c2:	2111      	movs	r1, #17
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fab9 	bl	800073c <MRCC_voidPreipheralEnable>


	MGPIO_voidSetPinDirection(GPIO_U8_PORTA,GPIO_U8_PIN9,GPIO_OUTPUT_AF_PP_50MHZ);
 80011ca:	220b      	movs	r2, #11
 80011cc:	2109      	movs	r1, #9
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff f8ba 	bl	8000348 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIO_U8_PORTA,GPIO_U8_PIN10,GPIO_INPUT_FLOATING);
 80011d4:	2204      	movs	r2, #4
 80011d6:	210a      	movs	r1, #10
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff f8b5 	bl	8000348 <MGPIO_voidSetPinDirection>

	MGPIO_voidSetPinDirection(GPIO_U8_PORTA,GPIO_U8_PIN2,GPIO_OUTPUT_AF_PP_50MHZ);
 80011de:	220b      	movs	r2, #11
 80011e0:	2102      	movs	r1, #2
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff f8b0 	bl	8000348 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIO_U8_PORTA,GPIO_U8_PIN3,GPIO_INPUT_FLOATING);
 80011e8:	2204      	movs	r2, #4
 80011ea:	2103      	movs	r1, #3
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff f8ab 	bl	8000348 <MGPIO_voidSetPinDirection>



	//UART init
	MUART_voidInit(UART_1);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fae0 	bl	80007b8 <MUART_voidInit>
	MUART_voidInit(UART_2);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fadd 	bl	80007b8 <MUART_voidInit>

	for(;;)
	{
		
#ifdef BL_DEBUG_INFO
 	BL_Print_Message("Bootloader Started ..\n");
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <main+0x74>)
 8001200:	f7ff fbb2 	bl	8000968 <BL_Print_Message>
#endif
		CommandStatus = BL_UART_Featch_Host_Command();
 8001204:	f7ff fbd4 	bl	80009b0 <BL_UART_Featch_Host_Command>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
 	BL_Print_Message("Bootloader Started ..\n");
 800120c:	e7f7      	b.n	80011fe <main+0x62>
 800120e:	bf00      	nop
 8001210:	0800202c 	.word	0x0800202c

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f000 f846 	bl	80012d4 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20005000 	.word	0x20005000
 8001274:	00000400 	.word	0x00000400
 8001278:	200001f4 	.word	0x200001f4
 800127c:	20000210 	.word	0x20000210

08001280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001282:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	; (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ae:	f000 f817 	bl	80012e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff ff73 	bl	800119c <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   r0, =_estack
 80012b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80012c4:	08002094 	.word	0x08002094
  ldr r2, =_sbss
 80012c8:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80012cc:	20000210 	.word	0x20000210

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>
	...

080012d4 <__errno>:
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <__errno+0x8>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000090 	.word	0x20000090

080012e0 <__libc_init_array>:
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	2600      	movs	r6, #0
 80012e4:	4d0c      	ldr	r5, [pc, #48]	; (8001318 <__libc_init_array+0x38>)
 80012e6:	4c0d      	ldr	r4, [pc, #52]	; (800131c <__libc_init_array+0x3c>)
 80012e8:	1b64      	subs	r4, r4, r5
 80012ea:	10a4      	asrs	r4, r4, #2
 80012ec:	42a6      	cmp	r6, r4
 80012ee:	d109      	bne.n	8001304 <__libc_init_array+0x24>
 80012f0:	f000 fc5c 	bl	8001bac <_init>
 80012f4:	2600      	movs	r6, #0
 80012f6:	4d0a      	ldr	r5, [pc, #40]	; (8001320 <__libc_init_array+0x40>)
 80012f8:	4c0a      	ldr	r4, [pc, #40]	; (8001324 <__libc_init_array+0x44>)
 80012fa:	1b64      	subs	r4, r4, r5
 80012fc:	10a4      	asrs	r4, r4, #2
 80012fe:	42a6      	cmp	r6, r4
 8001300:	d105      	bne.n	800130e <__libc_init_array+0x2e>
 8001302:	bd70      	pop	{r4, r5, r6, pc}
 8001304:	f855 3b04 	ldr.w	r3, [r5], #4
 8001308:	4798      	blx	r3
 800130a:	3601      	adds	r6, #1
 800130c:	e7ee      	b.n	80012ec <__libc_init_array+0xc>
 800130e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001312:	4798      	blx	r3
 8001314:	3601      	adds	r6, #1
 8001316:	e7f2      	b.n	80012fe <__libc_init_array+0x1e>
 8001318:	0800208c 	.word	0x0800208c
 800131c:	0800208c 	.word	0x0800208c
 8001320:	0800208c 	.word	0x0800208c
 8001324:	08002090 	.word	0x08002090

08001328 <memset>:
 8001328:	4603      	mov	r3, r0
 800132a:	4402      	add	r2, r0
 800132c:	4293      	cmp	r3, r2
 800132e:	d100      	bne.n	8001332 <memset+0xa>
 8001330:	4770      	bx	lr
 8001332:	f803 1b01 	strb.w	r1, [r3], #1
 8001336:	e7f9      	b.n	800132c <memset+0x4>

08001338 <_vsiprintf_r>:
 8001338:	b500      	push	{lr}
 800133a:	b09b      	sub	sp, #108	; 0x6c
 800133c:	9100      	str	r1, [sp, #0]
 800133e:	9104      	str	r1, [sp, #16]
 8001340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001344:	9105      	str	r1, [sp, #20]
 8001346:	9102      	str	r1, [sp, #8]
 8001348:	4905      	ldr	r1, [pc, #20]	; (8001360 <_vsiprintf_r+0x28>)
 800134a:	9103      	str	r1, [sp, #12]
 800134c:	4669      	mov	r1, sp
 800134e:	f000 f86f 	bl	8001430 <_svfiprintf_r>
 8001352:	2200      	movs	r2, #0
 8001354:	9b00      	ldr	r3, [sp, #0]
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	b01b      	add	sp, #108	; 0x6c
 800135a:	f85d fb04 	ldr.w	pc, [sp], #4
 800135e:	bf00      	nop
 8001360:	ffff0208 	.word	0xffff0208

08001364 <vsiprintf>:
 8001364:	4613      	mov	r3, r2
 8001366:	460a      	mov	r2, r1
 8001368:	4601      	mov	r1, r0
 800136a:	4802      	ldr	r0, [pc, #8]	; (8001374 <vsiprintf+0x10>)
 800136c:	6800      	ldr	r0, [r0, #0]
 800136e:	f7ff bfe3 	b.w	8001338 <_vsiprintf_r>
 8001372:	bf00      	nop
 8001374:	20000090 	.word	0x20000090

08001378 <__ssputs_r>:
 8001378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800137c:	688e      	ldr	r6, [r1, #8]
 800137e:	4682      	mov	sl, r0
 8001380:	429e      	cmp	r6, r3
 8001382:	460c      	mov	r4, r1
 8001384:	4690      	mov	r8, r2
 8001386:	461f      	mov	r7, r3
 8001388:	d838      	bhi.n	80013fc <__ssputs_r+0x84>
 800138a:	898a      	ldrh	r2, [r1, #12]
 800138c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001390:	d032      	beq.n	80013f8 <__ssputs_r+0x80>
 8001392:	6825      	ldr	r5, [r4, #0]
 8001394:	6909      	ldr	r1, [r1, #16]
 8001396:	3301      	adds	r3, #1
 8001398:	eba5 0901 	sub.w	r9, r5, r1
 800139c:	6965      	ldr	r5, [r4, #20]
 800139e:	444b      	add	r3, r9
 80013a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80013a8:	106d      	asrs	r5, r5, #1
 80013aa:	429d      	cmp	r5, r3
 80013ac:	bf38      	it	cc
 80013ae:	461d      	movcc	r5, r3
 80013b0:	0553      	lsls	r3, r2, #21
 80013b2:	d531      	bpl.n	8001418 <__ssputs_r+0xa0>
 80013b4:	4629      	mov	r1, r5
 80013b6:	f000 fb53 	bl	8001a60 <_malloc_r>
 80013ba:	4606      	mov	r6, r0
 80013bc:	b950      	cbnz	r0, 80013d4 <__ssputs_r+0x5c>
 80013be:	230c      	movs	r3, #12
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f8ca 3000 	str.w	r3, [sl]
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	81a3      	strh	r3, [r4, #12]
 80013d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013d4:	464a      	mov	r2, r9
 80013d6:	6921      	ldr	r1, [r4, #16]
 80013d8:	f000 face 	bl	8001978 <memcpy>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80013e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	6126      	str	r6, [r4, #16]
 80013ea:	444e      	add	r6, r9
 80013ec:	6026      	str	r6, [r4, #0]
 80013ee:	463e      	mov	r6, r7
 80013f0:	6165      	str	r5, [r4, #20]
 80013f2:	eba5 0509 	sub.w	r5, r5, r9
 80013f6:	60a5      	str	r5, [r4, #8]
 80013f8:	42be      	cmp	r6, r7
 80013fa:	d900      	bls.n	80013fe <__ssputs_r+0x86>
 80013fc:	463e      	mov	r6, r7
 80013fe:	4632      	mov	r2, r6
 8001400:	4641      	mov	r1, r8
 8001402:	6820      	ldr	r0, [r4, #0]
 8001404:	f000 fac6 	bl	8001994 <memmove>
 8001408:	68a3      	ldr	r3, [r4, #8]
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	1b9b      	subs	r3, r3, r6
 800140e:	4432      	add	r2, r6
 8001410:	2000      	movs	r0, #0
 8001412:	60a3      	str	r3, [r4, #8]
 8001414:	6022      	str	r2, [r4, #0]
 8001416:	e7db      	b.n	80013d0 <__ssputs_r+0x58>
 8001418:	462a      	mov	r2, r5
 800141a:	f000 fb7b 	bl	8001b14 <_realloc_r>
 800141e:	4606      	mov	r6, r0
 8001420:	2800      	cmp	r0, #0
 8001422:	d1e1      	bne.n	80013e8 <__ssputs_r+0x70>
 8001424:	4650      	mov	r0, sl
 8001426:	6921      	ldr	r1, [r4, #16]
 8001428:	f000 face 	bl	80019c8 <_free_r>
 800142c:	e7c7      	b.n	80013be <__ssputs_r+0x46>
	...

08001430 <_svfiprintf_r>:
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	4698      	mov	r8, r3
 8001436:	898b      	ldrh	r3, [r1, #12]
 8001438:	4607      	mov	r7, r0
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	460d      	mov	r5, r1
 800143e:	4614      	mov	r4, r2
 8001440:	b09d      	sub	sp, #116	; 0x74
 8001442:	d50e      	bpl.n	8001462 <_svfiprintf_r+0x32>
 8001444:	690b      	ldr	r3, [r1, #16]
 8001446:	b963      	cbnz	r3, 8001462 <_svfiprintf_r+0x32>
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	f000 fb09 	bl	8001a60 <_malloc_r>
 800144e:	6028      	str	r0, [r5, #0]
 8001450:	6128      	str	r0, [r5, #16]
 8001452:	b920      	cbnz	r0, 800145e <_svfiprintf_r+0x2e>
 8001454:	230c      	movs	r3, #12
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	e0d1      	b.n	8001602 <_svfiprintf_r+0x1d2>
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	616b      	str	r3, [r5, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	9309      	str	r3, [sp, #36]	; 0x24
 8001466:	2320      	movs	r3, #32
 8001468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800146c:	2330      	movs	r3, #48	; 0x30
 800146e:	f04f 0901 	mov.w	r9, #1
 8001472:	f8cd 800c 	str.w	r8, [sp, #12]
 8001476:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800161c <_svfiprintf_r+0x1ec>
 800147a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800147e:	4623      	mov	r3, r4
 8001480:	469a      	mov	sl, r3
 8001482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001486:	b10a      	cbz	r2, 800148c <_svfiprintf_r+0x5c>
 8001488:	2a25      	cmp	r2, #37	; 0x25
 800148a:	d1f9      	bne.n	8001480 <_svfiprintf_r+0x50>
 800148c:	ebba 0b04 	subs.w	fp, sl, r4
 8001490:	d00b      	beq.n	80014aa <_svfiprintf_r+0x7a>
 8001492:	465b      	mov	r3, fp
 8001494:	4622      	mov	r2, r4
 8001496:	4629      	mov	r1, r5
 8001498:	4638      	mov	r0, r7
 800149a:	f7ff ff6d 	bl	8001378 <__ssputs_r>
 800149e:	3001      	adds	r0, #1
 80014a0:	f000 80aa 	beq.w	80015f8 <_svfiprintf_r+0x1c8>
 80014a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014a6:	445a      	add	r2, fp
 80014a8:	9209      	str	r2, [sp, #36]	; 0x24
 80014aa:	f89a 3000 	ldrb.w	r3, [sl]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80a2 	beq.w	80015f8 <_svfiprintf_r+0x1c8>
 80014b4:	2300      	movs	r3, #0
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014be:	f10a 0a01 	add.w	sl, sl, #1
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	9307      	str	r3, [sp, #28]
 80014c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014ca:	931a      	str	r3, [sp, #104]	; 0x68
 80014cc:	4654      	mov	r4, sl
 80014ce:	2205      	movs	r2, #5
 80014d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014d4:	4851      	ldr	r0, [pc, #324]	; (800161c <_svfiprintf_r+0x1ec>)
 80014d6:	f000 fa41 	bl	800195c <memchr>
 80014da:	9a04      	ldr	r2, [sp, #16]
 80014dc:	b9d8      	cbnz	r0, 8001516 <_svfiprintf_r+0xe6>
 80014de:	06d0      	lsls	r0, r2, #27
 80014e0:	bf44      	itt	mi
 80014e2:	2320      	movmi	r3, #32
 80014e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014e8:	0711      	lsls	r1, r2, #28
 80014ea:	bf44      	itt	mi
 80014ec:	232b      	movmi	r3, #43	; 0x2b
 80014ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014f2:	f89a 3000 	ldrb.w	r3, [sl]
 80014f6:	2b2a      	cmp	r3, #42	; 0x2a
 80014f8:	d015      	beq.n	8001526 <_svfiprintf_r+0xf6>
 80014fa:	4654      	mov	r4, sl
 80014fc:	2000      	movs	r0, #0
 80014fe:	f04f 0c0a 	mov.w	ip, #10
 8001502:	9a07      	ldr	r2, [sp, #28]
 8001504:	4621      	mov	r1, r4
 8001506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800150a:	3b30      	subs	r3, #48	; 0x30
 800150c:	2b09      	cmp	r3, #9
 800150e:	d94e      	bls.n	80015ae <_svfiprintf_r+0x17e>
 8001510:	b1b0      	cbz	r0, 8001540 <_svfiprintf_r+0x110>
 8001512:	9207      	str	r2, [sp, #28]
 8001514:	e014      	b.n	8001540 <_svfiprintf_r+0x110>
 8001516:	eba0 0308 	sub.w	r3, r0, r8
 800151a:	fa09 f303 	lsl.w	r3, r9, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	46a2      	mov	sl, r4
 8001522:	9304      	str	r3, [sp, #16]
 8001524:	e7d2      	b.n	80014cc <_svfiprintf_r+0x9c>
 8001526:	9b03      	ldr	r3, [sp, #12]
 8001528:	1d19      	adds	r1, r3, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	9103      	str	r1, [sp, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bfbb      	ittet	lt
 8001532:	425b      	neglt	r3, r3
 8001534:	f042 0202 	orrlt.w	r2, r2, #2
 8001538:	9307      	strge	r3, [sp, #28]
 800153a:	9307      	strlt	r3, [sp, #28]
 800153c:	bfb8      	it	lt
 800153e:	9204      	strlt	r2, [sp, #16]
 8001540:	7823      	ldrb	r3, [r4, #0]
 8001542:	2b2e      	cmp	r3, #46	; 0x2e
 8001544:	d10c      	bne.n	8001560 <_svfiprintf_r+0x130>
 8001546:	7863      	ldrb	r3, [r4, #1]
 8001548:	2b2a      	cmp	r3, #42	; 0x2a
 800154a:	d135      	bne.n	80015b8 <_svfiprintf_r+0x188>
 800154c:	9b03      	ldr	r3, [sp, #12]
 800154e:	3402      	adds	r4, #2
 8001550:	1d1a      	adds	r2, r3, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	9203      	str	r2, [sp, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	bfb8      	it	lt
 800155a:	f04f 33ff 	movlt.w	r3, #4294967295
 800155e:	9305      	str	r3, [sp, #20]
 8001560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800162c <_svfiprintf_r+0x1fc>
 8001564:	2203      	movs	r2, #3
 8001566:	4650      	mov	r0, sl
 8001568:	7821      	ldrb	r1, [r4, #0]
 800156a:	f000 f9f7 	bl	800195c <memchr>
 800156e:	b140      	cbz	r0, 8001582 <_svfiprintf_r+0x152>
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	eba0 000a 	sub.w	r0, r0, sl
 8001576:	fa03 f000 	lsl.w	r0, r3, r0
 800157a:	9b04      	ldr	r3, [sp, #16]
 800157c:	3401      	adds	r4, #1
 800157e:	4303      	orrs	r3, r0
 8001580:	9304      	str	r3, [sp, #16]
 8001582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001586:	2206      	movs	r2, #6
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <_svfiprintf_r+0x1f0>)
 800158a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800158e:	f000 f9e5 	bl	800195c <memchr>
 8001592:	2800      	cmp	r0, #0
 8001594:	d038      	beq.n	8001608 <_svfiprintf_r+0x1d8>
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <_svfiprintf_r+0x1f4>)
 8001598:	bb1b      	cbnz	r3, 80015e2 <_svfiprintf_r+0x1b2>
 800159a:	9b03      	ldr	r3, [sp, #12]
 800159c:	3307      	adds	r3, #7
 800159e:	f023 0307 	bic.w	r3, r3, #7
 80015a2:	3308      	adds	r3, #8
 80015a4:	9303      	str	r3, [sp, #12]
 80015a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015a8:	4433      	add	r3, r6
 80015aa:	9309      	str	r3, [sp, #36]	; 0x24
 80015ac:	e767      	b.n	800147e <_svfiprintf_r+0x4e>
 80015ae:	460c      	mov	r4, r1
 80015b0:	2001      	movs	r0, #1
 80015b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80015b6:	e7a5      	b.n	8001504 <_svfiprintf_r+0xd4>
 80015b8:	2300      	movs	r3, #0
 80015ba:	f04f 0c0a 	mov.w	ip, #10
 80015be:	4619      	mov	r1, r3
 80015c0:	3401      	adds	r4, #1
 80015c2:	9305      	str	r3, [sp, #20]
 80015c4:	4620      	mov	r0, r4
 80015c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015ca:	3a30      	subs	r2, #48	; 0x30
 80015cc:	2a09      	cmp	r2, #9
 80015ce:	d903      	bls.n	80015d8 <_svfiprintf_r+0x1a8>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0c5      	beq.n	8001560 <_svfiprintf_r+0x130>
 80015d4:	9105      	str	r1, [sp, #20]
 80015d6:	e7c3      	b.n	8001560 <_svfiprintf_r+0x130>
 80015d8:	4604      	mov	r4, r0
 80015da:	2301      	movs	r3, #1
 80015dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80015e0:	e7f0      	b.n	80015c4 <_svfiprintf_r+0x194>
 80015e2:	ab03      	add	r3, sp, #12
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	462a      	mov	r2, r5
 80015e8:	4638      	mov	r0, r7
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <_svfiprintf_r+0x1f8>)
 80015ec:	a904      	add	r1, sp, #16
 80015ee:	f3af 8000 	nop.w
 80015f2:	1c42      	adds	r2, r0, #1
 80015f4:	4606      	mov	r6, r0
 80015f6:	d1d6      	bne.n	80015a6 <_svfiprintf_r+0x176>
 80015f8:	89ab      	ldrh	r3, [r5, #12]
 80015fa:	065b      	lsls	r3, r3, #25
 80015fc:	f53f af2c 	bmi.w	8001458 <_svfiprintf_r+0x28>
 8001600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001602:	b01d      	add	sp, #116	; 0x74
 8001604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001608:	ab03      	add	r3, sp, #12
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	462a      	mov	r2, r5
 800160e:	4638      	mov	r0, r7
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <_svfiprintf_r+0x1f8>)
 8001612:	a904      	add	r1, sp, #16
 8001614:	f000 f87c 	bl	8001710 <_printf_i>
 8001618:	e7eb      	b.n	80015f2 <_svfiprintf_r+0x1c2>
 800161a:	bf00      	nop
 800161c:	08002058 	.word	0x08002058
 8001620:	08002062 	.word	0x08002062
 8001624:	00000000 	.word	0x00000000
 8001628:	08001379 	.word	0x08001379
 800162c:	0800205e 	.word	0x0800205e

08001630 <_printf_common>:
 8001630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001634:	4616      	mov	r6, r2
 8001636:	4699      	mov	r9, r3
 8001638:	688a      	ldr	r2, [r1, #8]
 800163a:	690b      	ldr	r3, [r1, #16]
 800163c:	4607      	mov	r7, r0
 800163e:	4293      	cmp	r3, r2
 8001640:	bfb8      	it	lt
 8001642:	4613      	movlt	r3, r2
 8001644:	6033      	str	r3, [r6, #0]
 8001646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800164a:	460c      	mov	r4, r1
 800164c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001650:	b10a      	cbz	r2, 8001656 <_printf_common+0x26>
 8001652:	3301      	adds	r3, #1
 8001654:	6033      	str	r3, [r6, #0]
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	0699      	lsls	r1, r3, #26
 800165a:	bf42      	ittt	mi
 800165c:	6833      	ldrmi	r3, [r6, #0]
 800165e:	3302      	addmi	r3, #2
 8001660:	6033      	strmi	r3, [r6, #0]
 8001662:	6825      	ldr	r5, [r4, #0]
 8001664:	f015 0506 	ands.w	r5, r5, #6
 8001668:	d106      	bne.n	8001678 <_printf_common+0x48>
 800166a:	f104 0a19 	add.w	sl, r4, #25
 800166e:	68e3      	ldr	r3, [r4, #12]
 8001670:	6832      	ldr	r2, [r6, #0]
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	42ab      	cmp	r3, r5
 8001676:	dc28      	bgt.n	80016ca <_printf_common+0x9a>
 8001678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800167c:	1e13      	subs	r3, r2, #0
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	bf18      	it	ne
 8001682:	2301      	movne	r3, #1
 8001684:	0692      	lsls	r2, r2, #26
 8001686:	d42d      	bmi.n	80016e4 <_printf_common+0xb4>
 8001688:	4649      	mov	r1, r9
 800168a:	4638      	mov	r0, r7
 800168c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001690:	47c0      	blx	r8
 8001692:	3001      	adds	r0, #1
 8001694:	d020      	beq.n	80016d8 <_printf_common+0xa8>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	68e5      	ldr	r5, [r4, #12]
 800169a:	f003 0306 	and.w	r3, r3, #6
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf18      	it	ne
 80016a2:	2500      	movne	r5, #0
 80016a4:	6832      	ldr	r2, [r6, #0]
 80016a6:	f04f 0600 	mov.w	r6, #0
 80016aa:	68a3      	ldr	r3, [r4, #8]
 80016ac:	bf08      	it	eq
 80016ae:	1aad      	subeq	r5, r5, r2
 80016b0:	6922      	ldr	r2, [r4, #16]
 80016b2:	bf08      	it	eq
 80016b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bfc4      	itt	gt
 80016bc:	1a9b      	subgt	r3, r3, r2
 80016be:	18ed      	addgt	r5, r5, r3
 80016c0:	341a      	adds	r4, #26
 80016c2:	42b5      	cmp	r5, r6
 80016c4:	d11a      	bne.n	80016fc <_printf_common+0xcc>
 80016c6:	2000      	movs	r0, #0
 80016c8:	e008      	b.n	80016dc <_printf_common+0xac>
 80016ca:	2301      	movs	r3, #1
 80016cc:	4652      	mov	r2, sl
 80016ce:	4649      	mov	r1, r9
 80016d0:	4638      	mov	r0, r7
 80016d2:	47c0      	blx	r8
 80016d4:	3001      	adds	r0, #1
 80016d6:	d103      	bne.n	80016e0 <_printf_common+0xb0>
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016e0:	3501      	adds	r5, #1
 80016e2:	e7c4      	b.n	800166e <_printf_common+0x3e>
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	18e1      	adds	r1, r4, r3
 80016e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016f2:	4422      	add	r2, r4
 80016f4:	3302      	adds	r3, #2
 80016f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016fa:	e7c5      	b.n	8001688 <_printf_common+0x58>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4622      	mov	r2, r4
 8001700:	4649      	mov	r1, r9
 8001702:	4638      	mov	r0, r7
 8001704:	47c0      	blx	r8
 8001706:	3001      	adds	r0, #1
 8001708:	d0e6      	beq.n	80016d8 <_printf_common+0xa8>
 800170a:	3601      	adds	r6, #1
 800170c:	e7d9      	b.n	80016c2 <_printf_common+0x92>
	...

08001710 <_printf_i>:
 8001710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001714:	460c      	mov	r4, r1
 8001716:	7e27      	ldrb	r7, [r4, #24]
 8001718:	4691      	mov	r9, r2
 800171a:	2f78      	cmp	r7, #120	; 0x78
 800171c:	4680      	mov	r8, r0
 800171e:	469a      	mov	sl, r3
 8001720:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001722:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001726:	d807      	bhi.n	8001738 <_printf_i+0x28>
 8001728:	2f62      	cmp	r7, #98	; 0x62
 800172a:	d80a      	bhi.n	8001742 <_printf_i+0x32>
 800172c:	2f00      	cmp	r7, #0
 800172e:	f000 80d9 	beq.w	80018e4 <_printf_i+0x1d4>
 8001732:	2f58      	cmp	r7, #88	; 0x58
 8001734:	f000 80a4 	beq.w	8001880 <_printf_i+0x170>
 8001738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800173c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001740:	e03a      	b.n	80017b8 <_printf_i+0xa8>
 8001742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001746:	2b15      	cmp	r3, #21
 8001748:	d8f6      	bhi.n	8001738 <_printf_i+0x28>
 800174a:	a001      	add	r0, pc, #4	; (adr r0, 8001750 <_printf_i+0x40>)
 800174c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001750:	080017a9 	.word	0x080017a9
 8001754:	080017bd 	.word	0x080017bd
 8001758:	08001739 	.word	0x08001739
 800175c:	08001739 	.word	0x08001739
 8001760:	08001739 	.word	0x08001739
 8001764:	08001739 	.word	0x08001739
 8001768:	080017bd 	.word	0x080017bd
 800176c:	08001739 	.word	0x08001739
 8001770:	08001739 	.word	0x08001739
 8001774:	08001739 	.word	0x08001739
 8001778:	08001739 	.word	0x08001739
 800177c:	080018cb 	.word	0x080018cb
 8001780:	080017ed 	.word	0x080017ed
 8001784:	080018ad 	.word	0x080018ad
 8001788:	08001739 	.word	0x08001739
 800178c:	08001739 	.word	0x08001739
 8001790:	080018ed 	.word	0x080018ed
 8001794:	08001739 	.word	0x08001739
 8001798:	080017ed 	.word	0x080017ed
 800179c:	08001739 	.word	0x08001739
 80017a0:	08001739 	.word	0x08001739
 80017a4:	080018b5 	.word	0x080018b5
 80017a8:	680b      	ldr	r3, [r1, #0]
 80017aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80017ae:	1d1a      	adds	r2, r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	600a      	str	r2, [r1, #0]
 80017b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0a4      	b.n	8001906 <_printf_i+0x1f6>
 80017bc:	6825      	ldr	r5, [r4, #0]
 80017be:	6808      	ldr	r0, [r1, #0]
 80017c0:	062e      	lsls	r6, r5, #24
 80017c2:	f100 0304 	add.w	r3, r0, #4
 80017c6:	d50a      	bpl.n	80017de <_printf_i+0xce>
 80017c8:	6805      	ldr	r5, [r0, #0]
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	2d00      	cmp	r5, #0
 80017ce:	da03      	bge.n	80017d8 <_printf_i+0xc8>
 80017d0:	232d      	movs	r3, #45	; 0x2d
 80017d2:	426d      	negs	r5, r5
 80017d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017d8:	230a      	movs	r3, #10
 80017da:	485e      	ldr	r0, [pc, #376]	; (8001954 <_printf_i+0x244>)
 80017dc:	e019      	b.n	8001812 <_printf_i+0x102>
 80017de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80017e2:	6805      	ldr	r5, [r0, #0]
 80017e4:	600b      	str	r3, [r1, #0]
 80017e6:	bf18      	it	ne
 80017e8:	b22d      	sxthne	r5, r5
 80017ea:	e7ef      	b.n	80017cc <_printf_i+0xbc>
 80017ec:	680b      	ldr	r3, [r1, #0]
 80017ee:	6825      	ldr	r5, [r4, #0]
 80017f0:	1d18      	adds	r0, r3, #4
 80017f2:	6008      	str	r0, [r1, #0]
 80017f4:	0628      	lsls	r0, r5, #24
 80017f6:	d501      	bpl.n	80017fc <_printf_i+0xec>
 80017f8:	681d      	ldr	r5, [r3, #0]
 80017fa:	e002      	b.n	8001802 <_printf_i+0xf2>
 80017fc:	0669      	lsls	r1, r5, #25
 80017fe:	d5fb      	bpl.n	80017f8 <_printf_i+0xe8>
 8001800:	881d      	ldrh	r5, [r3, #0]
 8001802:	2f6f      	cmp	r7, #111	; 0x6f
 8001804:	bf0c      	ite	eq
 8001806:	2308      	moveq	r3, #8
 8001808:	230a      	movne	r3, #10
 800180a:	4852      	ldr	r0, [pc, #328]	; (8001954 <_printf_i+0x244>)
 800180c:	2100      	movs	r1, #0
 800180e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001812:	6866      	ldr	r6, [r4, #4]
 8001814:	2e00      	cmp	r6, #0
 8001816:	bfa8      	it	ge
 8001818:	6821      	ldrge	r1, [r4, #0]
 800181a:	60a6      	str	r6, [r4, #8]
 800181c:	bfa4      	itt	ge
 800181e:	f021 0104 	bicge.w	r1, r1, #4
 8001822:	6021      	strge	r1, [r4, #0]
 8001824:	b90d      	cbnz	r5, 800182a <_printf_i+0x11a>
 8001826:	2e00      	cmp	r6, #0
 8001828:	d04d      	beq.n	80018c6 <_printf_i+0x1b6>
 800182a:	4616      	mov	r6, r2
 800182c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001830:	fb03 5711 	mls	r7, r3, r1, r5
 8001834:	5dc7      	ldrb	r7, [r0, r7]
 8001836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800183a:	462f      	mov	r7, r5
 800183c:	42bb      	cmp	r3, r7
 800183e:	460d      	mov	r5, r1
 8001840:	d9f4      	bls.n	800182c <_printf_i+0x11c>
 8001842:	2b08      	cmp	r3, #8
 8001844:	d10b      	bne.n	800185e <_printf_i+0x14e>
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	07df      	lsls	r7, r3, #31
 800184a:	d508      	bpl.n	800185e <_printf_i+0x14e>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	6861      	ldr	r1, [r4, #4]
 8001850:	4299      	cmp	r1, r3
 8001852:	bfde      	ittt	le
 8001854:	2330      	movle	r3, #48	; 0x30
 8001856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800185a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800185e:	1b92      	subs	r2, r2, r6
 8001860:	6122      	str	r2, [r4, #16]
 8001862:	464b      	mov	r3, r9
 8001864:	4621      	mov	r1, r4
 8001866:	4640      	mov	r0, r8
 8001868:	f8cd a000 	str.w	sl, [sp]
 800186c:	aa03      	add	r2, sp, #12
 800186e:	f7ff fedf 	bl	8001630 <_printf_common>
 8001872:	3001      	adds	r0, #1
 8001874:	d14c      	bne.n	8001910 <_printf_i+0x200>
 8001876:	f04f 30ff 	mov.w	r0, #4294967295
 800187a:	b004      	add	sp, #16
 800187c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001880:	4834      	ldr	r0, [pc, #208]	; (8001954 <_printf_i+0x244>)
 8001882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001886:	680e      	ldr	r6, [r1, #0]
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	f856 5b04 	ldr.w	r5, [r6], #4
 800188e:	061f      	lsls	r7, r3, #24
 8001890:	600e      	str	r6, [r1, #0]
 8001892:	d514      	bpl.n	80018be <_printf_i+0x1ae>
 8001894:	07d9      	lsls	r1, r3, #31
 8001896:	bf44      	itt	mi
 8001898:	f043 0320 	orrmi.w	r3, r3, #32
 800189c:	6023      	strmi	r3, [r4, #0]
 800189e:	b91d      	cbnz	r5, 80018a8 <_printf_i+0x198>
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f023 0320 	bic.w	r3, r3, #32
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	2310      	movs	r3, #16
 80018aa:	e7af      	b.n	800180c <_printf_i+0xfc>
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	f043 0320 	orr.w	r3, r3, #32
 80018b2:	6023      	str	r3, [r4, #0]
 80018b4:	2378      	movs	r3, #120	; 0x78
 80018b6:	4828      	ldr	r0, [pc, #160]	; (8001958 <_printf_i+0x248>)
 80018b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018bc:	e7e3      	b.n	8001886 <_printf_i+0x176>
 80018be:	065e      	lsls	r6, r3, #25
 80018c0:	bf48      	it	mi
 80018c2:	b2ad      	uxthmi	r5, r5
 80018c4:	e7e6      	b.n	8001894 <_printf_i+0x184>
 80018c6:	4616      	mov	r6, r2
 80018c8:	e7bb      	b.n	8001842 <_printf_i+0x132>
 80018ca:	680b      	ldr	r3, [r1, #0]
 80018cc:	6826      	ldr	r6, [r4, #0]
 80018ce:	1d1d      	adds	r5, r3, #4
 80018d0:	6960      	ldr	r0, [r4, #20]
 80018d2:	600d      	str	r5, [r1, #0]
 80018d4:	0635      	lsls	r5, r6, #24
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	d501      	bpl.n	80018de <_printf_i+0x1ce>
 80018da:	6018      	str	r0, [r3, #0]
 80018dc:	e002      	b.n	80018e4 <_printf_i+0x1d4>
 80018de:	0671      	lsls	r1, r6, #25
 80018e0:	d5fb      	bpl.n	80018da <_printf_i+0x1ca>
 80018e2:	8018      	strh	r0, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	4616      	mov	r6, r2
 80018e8:	6123      	str	r3, [r4, #16]
 80018ea:	e7ba      	b.n	8001862 <_printf_i+0x152>
 80018ec:	680b      	ldr	r3, [r1, #0]
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	600a      	str	r2, [r1, #0]
 80018f2:	681e      	ldr	r6, [r3, #0]
 80018f4:	2100      	movs	r1, #0
 80018f6:	4630      	mov	r0, r6
 80018f8:	6862      	ldr	r2, [r4, #4]
 80018fa:	f000 f82f 	bl	800195c <memchr>
 80018fe:	b108      	cbz	r0, 8001904 <_printf_i+0x1f4>
 8001900:	1b80      	subs	r0, r0, r6
 8001902:	6060      	str	r0, [r4, #4]
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	6123      	str	r3, [r4, #16]
 8001908:	2300      	movs	r3, #0
 800190a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800190e:	e7a8      	b.n	8001862 <_printf_i+0x152>
 8001910:	4632      	mov	r2, r6
 8001912:	4649      	mov	r1, r9
 8001914:	4640      	mov	r0, r8
 8001916:	6923      	ldr	r3, [r4, #16]
 8001918:	47d0      	blx	sl
 800191a:	3001      	adds	r0, #1
 800191c:	d0ab      	beq.n	8001876 <_printf_i+0x166>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	079b      	lsls	r3, r3, #30
 8001922:	d413      	bmi.n	800194c <_printf_i+0x23c>
 8001924:	68e0      	ldr	r0, [r4, #12]
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	4298      	cmp	r0, r3
 800192a:	bfb8      	it	lt
 800192c:	4618      	movlt	r0, r3
 800192e:	e7a4      	b.n	800187a <_printf_i+0x16a>
 8001930:	2301      	movs	r3, #1
 8001932:	4632      	mov	r2, r6
 8001934:	4649      	mov	r1, r9
 8001936:	4640      	mov	r0, r8
 8001938:	47d0      	blx	sl
 800193a:	3001      	adds	r0, #1
 800193c:	d09b      	beq.n	8001876 <_printf_i+0x166>
 800193e:	3501      	adds	r5, #1
 8001940:	68e3      	ldr	r3, [r4, #12]
 8001942:	9903      	ldr	r1, [sp, #12]
 8001944:	1a5b      	subs	r3, r3, r1
 8001946:	42ab      	cmp	r3, r5
 8001948:	dcf2      	bgt.n	8001930 <_printf_i+0x220>
 800194a:	e7eb      	b.n	8001924 <_printf_i+0x214>
 800194c:	2500      	movs	r5, #0
 800194e:	f104 0619 	add.w	r6, r4, #25
 8001952:	e7f5      	b.n	8001940 <_printf_i+0x230>
 8001954:	08002069 	.word	0x08002069
 8001958:	0800207a 	.word	0x0800207a

0800195c <memchr>:
 800195c:	4603      	mov	r3, r0
 800195e:	b510      	push	{r4, lr}
 8001960:	b2c9      	uxtb	r1, r1
 8001962:	4402      	add	r2, r0
 8001964:	4293      	cmp	r3, r2
 8001966:	4618      	mov	r0, r3
 8001968:	d101      	bne.n	800196e <memchr+0x12>
 800196a:	2000      	movs	r0, #0
 800196c:	e003      	b.n	8001976 <memchr+0x1a>
 800196e:	7804      	ldrb	r4, [r0, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	428c      	cmp	r4, r1
 8001974:	d1f6      	bne.n	8001964 <memchr+0x8>
 8001976:	bd10      	pop	{r4, pc}

08001978 <memcpy>:
 8001978:	440a      	add	r2, r1
 800197a:	4291      	cmp	r1, r2
 800197c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001980:	d100      	bne.n	8001984 <memcpy+0xc>
 8001982:	4770      	bx	lr
 8001984:	b510      	push	{r4, lr}
 8001986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800198a:	4291      	cmp	r1, r2
 800198c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001990:	d1f9      	bne.n	8001986 <memcpy+0xe>
 8001992:	bd10      	pop	{r4, pc}

08001994 <memmove>:
 8001994:	4288      	cmp	r0, r1
 8001996:	b510      	push	{r4, lr}
 8001998:	eb01 0402 	add.w	r4, r1, r2
 800199c:	d902      	bls.n	80019a4 <memmove+0x10>
 800199e:	4284      	cmp	r4, r0
 80019a0:	4623      	mov	r3, r4
 80019a2:	d807      	bhi.n	80019b4 <memmove+0x20>
 80019a4:	1e43      	subs	r3, r0, #1
 80019a6:	42a1      	cmp	r1, r4
 80019a8:	d008      	beq.n	80019bc <memmove+0x28>
 80019aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019b2:	e7f8      	b.n	80019a6 <memmove+0x12>
 80019b4:	4601      	mov	r1, r0
 80019b6:	4402      	add	r2, r0
 80019b8:	428a      	cmp	r2, r1
 80019ba:	d100      	bne.n	80019be <memmove+0x2a>
 80019bc:	bd10      	pop	{r4, pc}
 80019be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019c6:	e7f7      	b.n	80019b8 <memmove+0x24>

080019c8 <_free_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4605      	mov	r5, r0
 80019cc:	2900      	cmp	r1, #0
 80019ce:	d043      	beq.n	8001a58 <_free_r+0x90>
 80019d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d4:	1f0c      	subs	r4, r1, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bfb8      	it	lt
 80019da:	18e4      	addlt	r4, r4, r3
 80019dc:	f000 f8d0 	bl	8001b80 <__malloc_lock>
 80019e0:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <_free_r+0x94>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	b933      	cbnz	r3, 80019f6 <_free_r+0x2e>
 80019e8:	6063      	str	r3, [r4, #4]
 80019ea:	6014      	str	r4, [r2, #0]
 80019ec:	4628      	mov	r0, r5
 80019ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019f2:	f000 b8cb 	b.w	8001b8c <__malloc_unlock>
 80019f6:	42a3      	cmp	r3, r4
 80019f8:	d90a      	bls.n	8001a10 <_free_r+0x48>
 80019fa:	6821      	ldr	r1, [r4, #0]
 80019fc:	1862      	adds	r2, r4, r1
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bf01      	itttt	eq
 8001a02:	681a      	ldreq	r2, [r3, #0]
 8001a04:	685b      	ldreq	r3, [r3, #4]
 8001a06:	1852      	addeq	r2, r2, r1
 8001a08:	6022      	streq	r2, [r4, #0]
 8001a0a:	6063      	str	r3, [r4, #4]
 8001a0c:	6004      	str	r4, [r0, #0]
 8001a0e:	e7ed      	b.n	80019ec <_free_r+0x24>
 8001a10:	461a      	mov	r2, r3
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	b10b      	cbz	r3, 8001a1a <_free_r+0x52>
 8001a16:	42a3      	cmp	r3, r4
 8001a18:	d9fa      	bls.n	8001a10 <_free_r+0x48>
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	1850      	adds	r0, r2, r1
 8001a1e:	42a0      	cmp	r0, r4
 8001a20:	d10b      	bne.n	8001a3a <_free_r+0x72>
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	4401      	add	r1, r0
 8001a26:	1850      	adds	r0, r2, r1
 8001a28:	4283      	cmp	r3, r0
 8001a2a:	6011      	str	r1, [r2, #0]
 8001a2c:	d1de      	bne.n	80019ec <_free_r+0x24>
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4401      	add	r1, r0
 8001a34:	6011      	str	r1, [r2, #0]
 8001a36:	6053      	str	r3, [r2, #4]
 8001a38:	e7d8      	b.n	80019ec <_free_r+0x24>
 8001a3a:	d902      	bls.n	8001a42 <_free_r+0x7a>
 8001a3c:	230c      	movs	r3, #12
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	e7d4      	b.n	80019ec <_free_r+0x24>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	1821      	adds	r1, r4, r0
 8001a46:	428b      	cmp	r3, r1
 8001a48:	bf01      	itttt	eq
 8001a4a:	6819      	ldreq	r1, [r3, #0]
 8001a4c:	685b      	ldreq	r3, [r3, #4]
 8001a4e:	1809      	addeq	r1, r1, r0
 8001a50:	6021      	streq	r1, [r4, #0]
 8001a52:	6063      	str	r3, [r4, #4]
 8001a54:	6054      	str	r4, [r2, #4]
 8001a56:	e7c9      	b.n	80019ec <_free_r+0x24>
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001f8 	.word	0x200001f8

08001a60 <_malloc_r>:
 8001a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a62:	1ccd      	adds	r5, r1, #3
 8001a64:	f025 0503 	bic.w	r5, r5, #3
 8001a68:	3508      	adds	r5, #8
 8001a6a:	2d0c      	cmp	r5, #12
 8001a6c:	bf38      	it	cc
 8001a6e:	250c      	movcc	r5, #12
 8001a70:	2d00      	cmp	r5, #0
 8001a72:	4606      	mov	r6, r0
 8001a74:	db01      	blt.n	8001a7a <_malloc_r+0x1a>
 8001a76:	42a9      	cmp	r1, r5
 8001a78:	d903      	bls.n	8001a82 <_malloc_r+0x22>
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	6033      	str	r3, [r6, #0]
 8001a7e:	2000      	movs	r0, #0
 8001a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a82:	f000 f87d 	bl	8001b80 <__malloc_lock>
 8001a86:	4921      	ldr	r1, [pc, #132]	; (8001b0c <_malloc_r+0xac>)
 8001a88:	680a      	ldr	r2, [r1, #0]
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	b99c      	cbnz	r4, 8001ab6 <_malloc_r+0x56>
 8001a8e:	4f20      	ldr	r7, [pc, #128]	; (8001b10 <_malloc_r+0xb0>)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b923      	cbnz	r3, 8001a9e <_malloc_r+0x3e>
 8001a94:	4621      	mov	r1, r4
 8001a96:	4630      	mov	r0, r6
 8001a98:	f000 f862 	bl	8001b60 <_sbrk_r>
 8001a9c:	6038      	str	r0, [r7, #0]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f000 f85d 	bl	8001b60 <_sbrk_r>
 8001aa6:	1c43      	adds	r3, r0, #1
 8001aa8:	d123      	bne.n	8001af2 <_malloc_r+0x92>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	4630      	mov	r0, r6
 8001aae:	6033      	str	r3, [r6, #0]
 8001ab0:	f000 f86c 	bl	8001b8c <__malloc_unlock>
 8001ab4:	e7e3      	b.n	8001a7e <_malloc_r+0x1e>
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	1b5b      	subs	r3, r3, r5
 8001aba:	d417      	bmi.n	8001aec <_malloc_r+0x8c>
 8001abc:	2b0b      	cmp	r3, #11
 8001abe:	d903      	bls.n	8001ac8 <_malloc_r+0x68>
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	441c      	add	r4, r3
 8001ac4:	6025      	str	r5, [r4, #0]
 8001ac6:	e004      	b.n	8001ad2 <_malloc_r+0x72>
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	bf0c      	ite	eq
 8001ace:	600b      	streq	r3, [r1, #0]
 8001ad0:	6053      	strne	r3, [r2, #4]
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f000 f85a 	bl	8001b8c <__malloc_unlock>
 8001ad8:	f104 000b 	add.w	r0, r4, #11
 8001adc:	1d23      	adds	r3, r4, #4
 8001ade:	f020 0007 	bic.w	r0, r0, #7
 8001ae2:	1ac2      	subs	r2, r0, r3
 8001ae4:	d0cc      	beq.n	8001a80 <_malloc_r+0x20>
 8001ae6:	1a1b      	subs	r3, r3, r0
 8001ae8:	50a3      	str	r3, [r4, r2]
 8001aea:	e7c9      	b.n	8001a80 <_malloc_r+0x20>
 8001aec:	4622      	mov	r2, r4
 8001aee:	6864      	ldr	r4, [r4, #4]
 8001af0:	e7cc      	b.n	8001a8c <_malloc_r+0x2c>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d0e3      	beq.n	8001ac4 <_malloc_r+0x64>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4630      	mov	r0, r6
 8001b00:	f000 f82e 	bl	8001b60 <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d1dd      	bne.n	8001ac4 <_malloc_r+0x64>
 8001b08:	e7cf      	b.n	8001aaa <_malloc_r+0x4a>
 8001b0a:	bf00      	nop
 8001b0c:	200001f8 	.word	0x200001f8
 8001b10:	200001fc 	.word	0x200001fc

08001b14 <_realloc_r>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	4607      	mov	r7, r0
 8001b18:	4614      	mov	r4, r2
 8001b1a:	460e      	mov	r6, r1
 8001b1c:	b921      	cbnz	r1, 8001b28 <_realloc_r+0x14>
 8001b1e:	4611      	mov	r1, r2
 8001b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001b24:	f7ff bf9c 	b.w	8001a60 <_malloc_r>
 8001b28:	b922      	cbnz	r2, 8001b34 <_realloc_r+0x20>
 8001b2a:	f7ff ff4d 	bl	80019c8 <_free_r>
 8001b2e:	4625      	mov	r5, r4
 8001b30:	4628      	mov	r0, r5
 8001b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b34:	f000 f830 	bl	8001b98 <_malloc_usable_size_r>
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d20f      	bcs.n	8001b5c <_realloc_r+0x48>
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	4638      	mov	r0, r7
 8001b40:	f7ff ff8e 	bl	8001a60 <_malloc_r>
 8001b44:	4605      	mov	r5, r0
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d0f2      	beq.n	8001b30 <_realloc_r+0x1c>
 8001b4a:	4631      	mov	r1, r6
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	f7ff ff13 	bl	8001978 <memcpy>
 8001b52:	4631      	mov	r1, r6
 8001b54:	4638      	mov	r0, r7
 8001b56:	f7ff ff37 	bl	80019c8 <_free_r>
 8001b5a:	e7e9      	b.n	8001b30 <_realloc_r+0x1c>
 8001b5c:	4635      	mov	r5, r6
 8001b5e:	e7e7      	b.n	8001b30 <_realloc_r+0x1c>

08001b60 <_sbrk_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	2300      	movs	r3, #0
 8001b64:	4d05      	ldr	r5, [pc, #20]	; (8001b7c <_sbrk_r+0x1c>)
 8001b66:	4604      	mov	r4, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	602b      	str	r3, [r5, #0]
 8001b6c:	f7ff fb52 	bl	8001214 <_sbrk>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_sbrk_r+0x1a>
 8001b74:	682b      	ldr	r3, [r5, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_sbrk_r+0x1a>
 8001b78:	6023      	str	r3, [r4, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	20000200 	.word	0x20000200

08001b80 <__malloc_lock>:
 8001b80:	4801      	ldr	r0, [pc, #4]	; (8001b88 <__malloc_lock+0x8>)
 8001b82:	f000 b811 	b.w	8001ba8 <__retarget_lock_acquire_recursive>
 8001b86:	bf00      	nop
 8001b88:	20000208 	.word	0x20000208

08001b8c <__malloc_unlock>:
 8001b8c:	4801      	ldr	r0, [pc, #4]	; (8001b94 <__malloc_unlock+0x8>)
 8001b8e:	f000 b80c 	b.w	8001baa <__retarget_lock_release_recursive>
 8001b92:	bf00      	nop
 8001b94:	20000208 	.word	0x20000208

08001b98 <_malloc_usable_size_r>:
 8001b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b9c:	1f18      	subs	r0, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bfbc      	itt	lt
 8001ba2:	580b      	ldrlt	r3, [r1, r0]
 8001ba4:	18c0      	addlt	r0, r0, r3
 8001ba6:	4770      	bx	lr

08001ba8 <__retarget_lock_acquire_recursive>:
 8001ba8:	4770      	bx	lr

08001baa <__retarget_lock_release_recursive>:
 8001baa:	4770      	bx	lr

08001bac <_init>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	bf00      	nop
 8001bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb2:	bc08      	pop	{r3}
 8001bb4:	469e      	mov	lr, r3
 8001bb6:	4770      	bx	lr

08001bb8 <_fini>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	bf00      	nop
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr
